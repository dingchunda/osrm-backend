// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#include "protobuf/graph.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace pbmldg
{
class EdgeDataDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<EdgeData> _instance;
} _EdgeData_default_instance_;
class MLDQueryGraphDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed<MLDQueryGraph> _instance;
} _MLDQueryGraph_default_instance_;
} // namespace pbmldg
namespace protobuf_graph_2eproto
{
void InitDefaultsEdgeDataImpl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
    ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
    ::google::protobuf::internal::InitProtobufDefaults();
#endif // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
    {
        void *ptr = &::pbmldg::_EdgeData_default_instance_;
        new (ptr)::pbmldg::EdgeData();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pbmldg::EdgeData::InitAsDefaultInstance();
}

void InitDefaultsEdgeData()
{
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEdgeDataImpl);
}

void InitDefaultsMLDQueryGraphImpl()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
    ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
    ::google::protobuf::internal::InitProtobufDefaults();
#endif // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
    protobuf_graph_2eproto::InitDefaultsEdgeData();
    {
        void *ptr = &::pbmldg::_MLDQueryGraph_default_instance_;
        new (ptr)::pbmldg::MLDQueryGraph();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::pbmldg::MLDQueryGraph::InitAsDefaultInstance();
}

void InitDefaultsMLDQueryGraph()
{
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMLDQueryGraphImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::EdgeData, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::EdgeData, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::EdgeData, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::EdgeData, turnid_),
    0,
    1,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::MLDQueryGraph, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::MLDQueryGraph, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::MLDQueryGraph, nodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::MLDQueryGraph, edges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::MLDQueryGraph, isforward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::MLDQueryGraph, isbackward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::MLDQueryGraph, nodeleveloffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldg::MLDQueryGraph, nodeweights_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
};
static const ::google::protobuf::internal::MigrationSchema
    schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 7, sizeof(::pbmldg::EdgeData)},
        {9, 20, sizeof(::pbmldg::MLDQueryGraph)},
};

static ::google::protobuf::Message const *const file_default_instances[] = {
    reinterpret_cast<const ::google::protobuf::Message *>(&::pbmldg::_EdgeData_default_instance_),
    reinterpret_cast<const ::google::protobuf::Message *>(
        &::pbmldg::_MLDQueryGraph_default_instance_),
};

void protobuf_AssignDescriptors()
{
    AddDescriptors();
    ::google::protobuf::MessageFactory *factory = NULL;
    AssignDescriptors("graph.proto",
                      schemas,
                      file_default_instances,
                      TableStruct::offsets,
                      factory,
                      file_level_metadata,
                      NULL,
                      NULL);
}

void protobuf_AssignDescriptorsOnce()
{
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string &) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string &)
{
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl()
{
    InitDefaults();
    static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        "\n\013graph.proto\022\006pbmldg\"*\n\010EdgeData\022\016\n\006Tar"
        "get\030\001 \001(\r\022\016\n\006TurnID\030\002 \001(\r\"\224\001\n\rMLDQueryGr"
        "aph\022\r\n\005nodes\030\001 \003(\r\022\037\n\005edges\030\002 \003(\0132\020.pbml"
        "dg.EdgeData\022\021\n\tIsForward\030\003 \003(\010\022\022\n\nIsBack"
        "ward\030\004 \003(\010\022\027\n\017nodeLevelOffset\030\005 \003(\r\022\023\n\013n"
        "odeWeights\030\006 \003(\005"};
    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(descriptor, 216);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile("graph.proto",
                                                                      &protobuf_RegisterTypes);
}

void AddDescriptors()
{
    static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
    ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer
{
    StaticDescriptorInitializer() { AddDescriptors(); }
} static_descriptor_initializer;
} // namespace protobuf_graph_2eproto
namespace pbmldg
{

// ===================================================================

void EdgeData::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgeData::kTargetFieldNumber;
const int EdgeData::kTurnIDFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgeData::EdgeData() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance()))
    {
        ::protobuf_graph_2eproto::InitDefaultsEdgeData();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:pbmldg.EdgeData)
}
EdgeData::EdgeData(const EdgeData &from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), _has_bits_(from._has_bits_),
      _cached_size_(0)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&target_,
             &from.target_,
             static_cast<size_t>(reinterpret_cast<char *>(&turnid_) -
                                 reinterpret_cast<char *>(&target_)) +
                 sizeof(turnid_));
    // @@protoc_insertion_point(copy_constructor:pbmldg.EdgeData)
}

void EdgeData::SharedCtor()
{
    _cached_size_ = 0;
    ::memset(&target_,
             0,
             static_cast<size_t>(reinterpret_cast<char *>(&turnid_) -
                                 reinterpret_cast<char *>(&target_)) +
                 sizeof(turnid_));
}

EdgeData::~EdgeData()
{
    // @@protoc_insertion_point(destructor:pbmldg.EdgeData)
    SharedDtor();
}

void EdgeData::SharedDtor() {}

void EdgeData::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *EdgeData::descriptor()
{
    ::protobuf_graph_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_graph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EdgeData &EdgeData::default_instance()
{
    ::protobuf_graph_2eproto::InitDefaultsEdgeData();
    return *internal_default_instance();
}

EdgeData *EdgeData::New(::google::protobuf::Arena *arena) const
{
    EdgeData *n = new EdgeData;
    if (arena != NULL)
    {
        arena->Own(n);
    }
    return n;
}

void EdgeData::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pbmldg.EdgeData)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    cached_has_bits = _has_bits_[0];
    if (cached_has_bits & 3u)
    {
        ::memset(&target_,
                 0,
                 static_cast<size_t>(reinterpret_cast<char *>(&turnid_) -
                                     reinterpret_cast<char *>(&target_)) +
                     sizeof(turnid_));
    }
    _has_bits_.Clear();
    _internal_metadata_.Clear();
}

bool EdgeData::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                                                                            \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                                          \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pbmldg.EdgeData)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // optional uint32 Target = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) ==
                static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */))
            {
                set_has_target();
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &target_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // optional uint32 TurnID = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) ==
                static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */))
            {
                set_has_turnid();
                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(input, &turnid_)));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pbmldg.EdgeData)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pbmldg.EdgeData)
    return false;
#undef DO_
}

void EdgeData::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pbmldg.EdgeData)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // optional uint32 Target = 1;
    if (cached_has_bits & 0x00000001u)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target(), output);
    }

    // optional uint32 TurnID = 2;
    if (cached_has_bits & 0x00000002u)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->turnid(), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pbmldg.EdgeData)
}

::google::protobuf::uint8 *
EdgeData::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                  ::google::protobuf::uint8 *target) const
{
    (void)deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:pbmldg.EdgeData)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = _has_bits_[0];
    // optional uint32 Target = 1;
    if (cached_has_bits & 0x00000001u)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(
            1, this->target(), target);
    }

    // optional uint32 TurnID = 2;
    if (cached_has_bits & 0x00000002u)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(
            2, this->turnid(), target);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pbmldg.EdgeData)
    return target;
}

size_t EdgeData::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pbmldg.EdgeData)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
    }
    if (_has_bits_[0 / 32] & 3u)
    {
        // optional uint32 Target = 1;
        if (has_target())
        {
            total_size +=
                1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->target());
        }

        // optional uint32 TurnID = 2;
        if (has_turnid())
        {
            total_size +=
                1 + ::google::protobuf::internal::WireFormatLite::UInt32Size(this->turnid());
        }
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void EdgeData::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pbmldg.EdgeData)
    GOOGLE_DCHECK_NE(&from, this);
    const EdgeData *source =
        ::google::protobuf::internal::DynamicCastToGenerated<const EdgeData>(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbmldg.EdgeData)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pbmldg.EdgeData)
        MergeFrom(*source);
    }
}

void EdgeData::MergeFrom(const EdgeData &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pbmldg.EdgeData)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    cached_has_bits = from._has_bits_[0];
    if (cached_has_bits & 3u)
    {
        if (cached_has_bits & 0x00000001u)
        {
            target_ = from.target_;
        }
        if (cached_has_bits & 0x00000002u)
        {
            turnid_ = from.turnid_;
        }
        _has_bits_[0] |= cached_has_bits;
    }
}

void EdgeData::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pbmldg.EdgeData)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void EdgeData::CopyFrom(const EdgeData &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pbmldg.EdgeData)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool EdgeData::IsInitialized() const { return true; }

void EdgeData::Swap(EdgeData *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void EdgeData::InternalSwap(EdgeData *other)
{
    using std::swap;
    swap(target_, other->target_);
    swap(turnid_, other->turnid_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgeData::GetMetadata() const
{
    protobuf_graph_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_graph_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void MLDQueryGraph::InitAsDefaultInstance() {}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MLDQueryGraph::kNodesFieldNumber;
const int MLDQueryGraph::kEdgesFieldNumber;
const int MLDQueryGraph::kIsForwardFieldNumber;
const int MLDQueryGraph::kIsBackwardFieldNumber;
const int MLDQueryGraph::kNodeLevelOffsetFieldNumber;
const int MLDQueryGraph::kNodeWeightsFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

MLDQueryGraph::MLDQueryGraph() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    if (GOOGLE_PREDICT_TRUE(this != internal_default_instance()))
    {
        ::protobuf_graph_2eproto::InitDefaultsMLDQueryGraph();
    }
    SharedCtor();
    // @@protoc_insertion_point(constructor:pbmldg.MLDQueryGraph)
}
MLDQueryGraph::MLDQueryGraph(const MLDQueryGraph &from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), _has_bits_(from._has_bits_),
      _cached_size_(0), nodes_(from.nodes_), edges_(from.edges_), isforward_(from.isforward_),
      isbackward_(from.isbackward_), nodeleveloffset_(from.nodeleveloffset_),
      nodeweights_(from.nodeweights_)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:pbmldg.MLDQueryGraph)
}

void MLDQueryGraph::SharedCtor() { _cached_size_ = 0; }

MLDQueryGraph::~MLDQueryGraph()
{
    // @@protoc_insertion_point(destructor:pbmldg.MLDQueryGraph)
    SharedDtor();
}

void MLDQueryGraph::SharedDtor() {}

void MLDQueryGraph::SetCachedSize(int size) const
{
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor *MLDQueryGraph::descriptor()
{
    ::protobuf_graph_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_graph_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MLDQueryGraph &MLDQueryGraph::default_instance()
{
    ::protobuf_graph_2eproto::InitDefaultsMLDQueryGraph();
    return *internal_default_instance();
}

MLDQueryGraph *MLDQueryGraph::New(::google::protobuf::Arena *arena) const
{
    MLDQueryGraph *n = new MLDQueryGraph;
    if (arena != NULL)
    {
        arena->Own(n);
    }
    return n;
}

void MLDQueryGraph::Clear()
{
    // @@protoc_insertion_point(message_clear_start:pbmldg.MLDQueryGraph)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    nodes_.Clear();
    edges_.Clear();
    isforward_.Clear();
    isbackward_.Clear();
    nodeleveloffset_.Clear();
    nodeweights_.Clear();
    _has_bits_.Clear();
    _internal_metadata_.Clear();
}

bool MLDQueryGraph::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream *input)
{
#define DO_(EXPRESSION)                                                                            \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION))                                                          \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:pbmldg.MLDQueryGraph)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // repeated uint32 nodes = 1;
        case 1:
        {
            if (static_cast<::google::protobuf::uint8>(tag) ==
                static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    1, 8u, input, this->mutable_nodes())));
            }
            else if (static_cast<::google::protobuf::uint8>(tag) ==
                     static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, this->mutable_nodes())));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated .pbmldg.EdgeData edges = 2;
        case 2:
        {
            if (static_cast<::google::protobuf::uint8>(tag) ==
                static_cast<::google::protobuf::uint8>(18u /* 18 & 0xFF */))
            {
                DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_edges()));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated bool IsForward = 3;
        case 3:
        {
            if (static_cast<::google::protobuf::uint8>(tag) ==
                static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     bool,
                     ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    1, 24u, input, this->mutable_isforward())));
            }
            else if (static_cast<::google::protobuf::uint8>(tag) ==
                     static_cast<::google::protobuf::uint8>(26u /* 26 & 0xFF */))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     bool,
                     ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, this->mutable_isforward())));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated bool IsBackward = 4;
        case 4:
        {
            if (static_cast<::google::protobuf::uint8>(tag) ==
                static_cast<::google::protobuf::uint8>(32u /* 32 & 0xFF */))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     bool,
                     ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    1, 32u, input, this->mutable_isbackward())));
            }
            else if (static_cast<::google::protobuf::uint8>(tag) ==
                     static_cast<::google::protobuf::uint8>(34u /* 34 & 0xFF */))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     bool,
                     ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                    input, this->mutable_isbackward())));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated uint32 nodeLevelOffset = 5;
        case 5:
        {
            if (static_cast<::google::protobuf::uint8>(tag) ==
                static_cast<::google::protobuf::uint8>(40u /* 40 & 0xFF */))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    1, 40u, input, this->mutable_nodeleveloffset())));
            }
            else if (static_cast<::google::protobuf::uint8>(tag) ==
                     static_cast<::google::protobuf::uint8>(42u /* 42 & 0xFF */))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::uint32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                    input, this->mutable_nodeleveloffset())));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        // repeated int32 nodeWeights = 6;
        case 6:
        {
            if (static_cast<::google::protobuf::uint8>(tag) ==
                static_cast<::google::protobuf::uint8>(48u /* 48 & 0xFF */))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                     ::google::protobuf::int32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    1, 48u, input, this->mutable_nodeweights())));
            }
            else if (static_cast<::google::protobuf::uint8>(tag) ==
                     static_cast<::google::protobuf::uint8>(50u /* 50 & 0xFF */))
            {
                DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                     ::google::protobuf::int32,
                     ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                    input, this->mutable_nodeweights())));
            }
            else
            {
                goto handle_unusual;
            }
            break;
        }

        default:
        {
        handle_unusual:
            if (tag == 0)
            {
                goto success;
            }
            DO_(::google::protobuf::internal::WireFormat::SkipField(
                input, tag, _internal_metadata_.mutable_unknown_fields()));
            break;
        }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:pbmldg.MLDQueryGraph)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:pbmldg.MLDQueryGraph)
    return false;
#undef DO_
}

void MLDQueryGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream *output) const
{
    // @@protoc_insertion_point(serialize_start:pbmldg.MLDQueryGraph)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated uint32 nodes = 1;
    for (int i = 0, n = this->nodes_size(); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nodes(i), output);
    }

    // repeated .pbmldg.EdgeData edges = 2;
    for (unsigned int i = 0, n = static_cast<unsigned int>(this->edges_size()); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, this->edges(static_cast<int>(i)), output);
    }

    // repeated bool IsForward = 3;
    for (int i = 0, n = this->isforward_size(); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isforward(i), output);
    }

    // repeated bool IsBackward = 4;
    for (int i = 0, n = this->isbackward_size(); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isbackward(i), output);
    }

    // repeated uint32 nodeLevelOffset = 5;
    for (int i = 0, n = this->nodeleveloffset_size(); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteUInt32(
            5, this->nodeleveloffset(i), output);
    }

    // repeated int32 nodeWeights = 6;
    for (int i = 0, n = this->nodeweights_size(); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nodeweights(i), output);
    }

    if (_internal_metadata_.have_unknown_fields())
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            _internal_metadata_.unknown_fields(), output);
    }
    // @@protoc_insertion_point(serialize_end:pbmldg.MLDQueryGraph)
}

::google::protobuf::uint8 *
MLDQueryGraph::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                       ::google::protobuf::uint8 *target) const
{
    (void)deterministic; // Unused
    // @@protoc_insertion_point(serialize_to_array_start:pbmldg.MLDQueryGraph)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated uint32 nodes = 1;
    target =
        ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nodes_, target);

    // repeated .pbmldg.EdgeData edges = 2;
    for (unsigned int i = 0, n = static_cast<unsigned int>(this->edges_size()); i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            2, this->edges(static_cast<int>(i)), deterministic, target);
    }

    // repeated bool IsForward = 3;
    target =
        ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isforward_, target);

    // repeated bool IsBackward = 4;
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(
        4, this->isbackward_, target);

    // repeated uint32 nodeLevelOffset = 5;
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(
        5, this->nodeleveloffset_, target);

    // repeated int32 nodeWeights = 6;
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(
        6, this->nodeweights_, target);

    if (_internal_metadata_.have_unknown_fields())
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields(), target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:pbmldg.MLDQueryGraph)
    return target;
}

size_t MLDQueryGraph::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:pbmldg.MLDQueryGraph)
    size_t total_size = 0;

    if (_internal_metadata_.have_unknown_fields())
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
    }
    // repeated uint32 nodes = 1;
    {
        size_t data_size = ::google::protobuf::internal::WireFormatLite::UInt32Size(this->nodes_);
        total_size += 1 * ::google::protobuf::internal::FromIntSize(this->nodes_size());
        total_size += data_size;
    }

    // repeated .pbmldg.EdgeData edges = 2;
    {
        unsigned int count = static_cast<unsigned int>(this->edges_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(
                this->edges(static_cast<int>(i)));
        }
    }

    // repeated bool IsForward = 3;
    {
        unsigned int count = static_cast<unsigned int>(this->isforward_size());
        size_t data_size = 1UL * count;
        total_size += 1 * ::google::protobuf::internal::FromIntSize(this->isforward_size());
        total_size += data_size;
    }

    // repeated bool IsBackward = 4;
    {
        unsigned int count = static_cast<unsigned int>(this->isbackward_size());
        size_t data_size = 1UL * count;
        total_size += 1 * ::google::protobuf::internal::FromIntSize(this->isbackward_size());
        total_size += data_size;
    }

    // repeated uint32 nodeLevelOffset = 5;
    {
        size_t data_size =
            ::google::protobuf::internal::WireFormatLite::UInt32Size(this->nodeleveloffset_);
        total_size += 1 * ::google::protobuf::internal::FromIntSize(this->nodeleveloffset_size());
        total_size += data_size;
    }

    // repeated int32 nodeWeights = 6;
    {
        size_t data_size =
            ::google::protobuf::internal::WireFormatLite::Int32Size(this->nodeweights_);
        total_size += 1 * ::google::protobuf::internal::FromIntSize(this->nodeweights_size());
        total_size += data_size;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cached_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    return total_size;
}

void MLDQueryGraph::MergeFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:pbmldg.MLDQueryGraph)
    GOOGLE_DCHECK_NE(&from, this);
    const MLDQueryGraph *source =
        ::google::protobuf::internal::DynamicCastToGenerated<const MLDQueryGraph>(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbmldg.MLDQueryGraph)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:pbmldg.MLDQueryGraph)
        MergeFrom(*source);
    }
}

void MLDQueryGraph::MergeFrom(const MLDQueryGraph &from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:pbmldg.MLDQueryGraph)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    nodes_.MergeFrom(from.nodes_);
    edges_.MergeFrom(from.edges_);
    isforward_.MergeFrom(from.isforward_);
    isbackward_.MergeFrom(from.isbackward_);
    nodeleveloffset_.MergeFrom(from.nodeleveloffset_);
    nodeweights_.MergeFrom(from.nodeweights_);
}

void MLDQueryGraph::CopyFrom(const ::google::protobuf::Message &from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:pbmldg.MLDQueryGraph)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void MLDQueryGraph::CopyFrom(const MLDQueryGraph &from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:pbmldg.MLDQueryGraph)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool MLDQueryGraph::IsInitialized() const { return true; }

void MLDQueryGraph::Swap(MLDQueryGraph *other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void MLDQueryGraph::InternalSwap(MLDQueryGraph *other)
{
    using std::swap;
    nodes_.InternalSwap(&other->nodes_);
    edges_.InternalSwap(&other->edges_);
    isforward_.InternalSwap(&other->isforward_);
    isbackward_.InternalSwap(&other->isbackward_);
    nodeleveloffset_.InternalSwap(&other->nodeleveloffset_);
    nodeweights_.InternalSwap(&other->nodeweights_);
    swap(_has_bits_[0], other->_has_bits_[0]);
    _internal_metadata_.Swap(&other->_internal_metadata_);
    swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MLDQueryGraph::GetMetadata() const
{
    protobuf_graph_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_graph_2eproto::file_level_metadata[kIndexInFileMessages];
}

// @@protoc_insertion_point(namespace_scope)
} // namespace pbmldg

// @@protoc_insertion_point(global_scope)
