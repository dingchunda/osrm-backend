// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node-based-graph.proto

#include "node-based-graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_node_2dbased_2dgraph_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Coordinate_node_2dbased_2dgraph_2eproto;
namespace pbnbg {
class CoordinateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Coordinate> _instance;
} _Coordinate_default_instance_;
class NodesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Nodes> _instance;
} _Nodes_default_instance_;
class CompressedNbgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompressedNbg> _instance;
} _CompressedNbg_default_instance_;
class StreetNamesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreetNames> _instance;
} _StreetNames_default_instance_;
}  // namespace pbnbg
static void InitDefaultsCoordinate_node_2dbased_2dgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnbg::_Coordinate_default_instance_;
    new (ptr) ::pbnbg::Coordinate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnbg::Coordinate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Coordinate_node_2dbased_2dgraph_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCoordinate_node_2dbased_2dgraph_2eproto}, {}};

static void InitDefaultsNodes_node_2dbased_2dgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnbg::_Nodes_default_instance_;
    new (ptr) ::pbnbg::Nodes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnbg::Nodes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Nodes_node_2dbased_2dgraph_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNodes_node_2dbased_2dgraph_2eproto}, {
      &scc_info_Coordinate_node_2dbased_2dgraph_2eproto.base,}};

static void InitDefaultsCompressedNbg_node_2dbased_2dgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnbg::_CompressedNbg_default_instance_;
    new (ptr) ::pbnbg::CompressedNbg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnbg::CompressedNbg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CompressedNbg_node_2dbased_2dgraph_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCompressedNbg_node_2dbased_2dgraph_2eproto}, {}};

static void InitDefaultsStreetNames_node_2dbased_2dgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbnbg::_StreetNames_default_instance_;
    new (ptr) ::pbnbg::StreetNames();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbnbg::StreetNames::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_StreetNames_node_2dbased_2dgraph_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsStreetNames_node_2dbased_2dgraph_2eproto}, {}};

void InitDefaults_node_2dbased_2dgraph_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Coordinate_node_2dbased_2dgraph_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Nodes_node_2dbased_2dgraph_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CompressedNbg_node_2dbased_2dgraph_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StreetNames_node_2dbased_2dgraph_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_node_2dbased_2dgraph_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_node_2dbased_2dgraph_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_node_2dbased_2dgraph_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_node_2dbased_2dgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnbg::Coordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnbg::Coordinate, lon_),
  PROTOBUF_FIELD_OFFSET(::pbnbg::Coordinate, lat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnbg::Nodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnbg::Nodes, latlon_),
  PROTOBUF_FIELD_OFFSET(::pbnbg::Nodes, osmid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnbg::CompressedNbg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnbg::CompressedNbg, index_),
  PROTOBUF_FIELD_OFFSET(::pbnbg::CompressedNbg, nodes_),
  PROTOBUF_FIELD_OFFSET(::pbnbg::CompressedNbg, forward_weights_),
  PROTOBUF_FIELD_OFFSET(::pbnbg::CompressedNbg, reverse_weights_),
  PROTOBUF_FIELD_OFFSET(::pbnbg::CompressedNbg, distances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbnbg::StreetNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbnbg::StreetNames, names_packed_),
  PROTOBUF_FIELD_OFFSET(::pbnbg::StreetNames, name_offsets_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pbnbg::Coordinate)},
  { 7, -1, sizeof(::pbnbg::Nodes)},
  { 14, -1, sizeof(::pbnbg::CompressedNbg)},
  { 24, -1, sizeof(::pbnbg::StreetNames)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbnbg::_Coordinate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbnbg::_Nodes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbnbg::_CompressedNbg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbnbg::_StreetNames_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_node_2dbased_2dgraph_2eproto = {
  {}, AddDescriptors_node_2dbased_2dgraph_2eproto, "node-based-graph.proto", schemas,
  file_default_instances, TableStruct_node_2dbased_2dgraph_2eproto::offsets,
  file_level_metadata_node_2dbased_2dgraph_2eproto, 4, file_level_enum_descriptors_node_2dbased_2dgraph_2eproto, file_level_service_descriptors_node_2dbased_2dgraph_2eproto,
};

const char descriptor_table_protodef_node_2dbased_2dgraph_2eproto[] =
  "\n\026node-based-graph.proto\022\005pbnbg\"&\n\nCoord"
  "inate\022\013\n\003lon\030\001 \001(\005\022\013\n\003lat\030\002 \001(\005\"9\n\005Nodes"
  "\022!\n\006latLon\030\001 \003(\0132\021.pbnbg.Coordinate\022\r\n\005o"
  "smid\030\002 \003(\004\"r\n\rCompressedNbg\022\r\n\005index\030\001 \003"
  "(\r\022\r\n\005nodes\030\002 \003(\r\022\027\n\017forward_weights\030\003 \003"
  "(\005\022\027\n\017reverse_weights\030\004 \003(\005\022\021\n\tdistances"
  "\030\005 \003(\005\"9\n\013StreetNames\022\024\n\014names_packed\030\001 "
  "\001(\t\022\024\n\014name_offsets\030\002 \003(\rb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_node_2dbased_2dgraph_2eproto = {
  false, InitDefaults_node_2dbased_2dgraph_2eproto, 
  descriptor_table_protodef_node_2dbased_2dgraph_2eproto,
  "node-based-graph.proto", &assign_descriptors_table_node_2dbased_2dgraph_2eproto, 313,
};

void AddDescriptors_node_2dbased_2dgraph_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_node_2dbased_2dgraph_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_node_2dbased_2dgraph_2eproto = []() { AddDescriptors_node_2dbased_2dgraph_2eproto(); return true; }();
namespace pbnbg {

// ===================================================================

void Coordinate::InitAsDefaultInstance() {
}
class Coordinate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Coordinate::kLonFieldNumber;
const int Coordinate::kLatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Coordinate::Coordinate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.Coordinate)
}
Coordinate::Coordinate(const Coordinate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lon_, &from.lon_,
    static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
    reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
  // @@protoc_insertion_point(copy_constructor:pbnbg.Coordinate)
}

void Coordinate::SharedCtor() {
  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
}

Coordinate::~Coordinate() {
  // @@protoc_insertion_point(destructor:pbnbg.Coordinate)
  SharedDtor();
}

void Coordinate::SharedDtor() {
}

void Coordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coordinate& Coordinate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Coordinate_node_2dbased_2dgraph_2eproto.base);
  return *internal_default_instance();
}


void Coordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lon_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&lon_)) + sizeof(lat_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Coordinate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Coordinate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 lon = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_lon(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 lat = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_lat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.Coordinate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 lon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.Coordinate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.Coordinate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lon = 1;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lon(), output);
  }

  // int32 lat = 2;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnbg.Coordinate)
}

::google::protobuf::uint8* Coordinate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.Coordinate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 lon = 1;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lon(), target);
  }

  // int32 lat = 2;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.Coordinate)
  return target;
}

size_t Coordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.Coordinate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 lon = 1;
  if (this->lon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lon());
  }

  // int32 lat = 2;
  if (this->lat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const Coordinate* source =
      ::google::protobuf::DynamicCastToGenerated<Coordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.Coordinate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.Coordinate)
    MergeFrom(*source);
  }
}

void Coordinate::MergeFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.Coordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
}

void Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinate::CopyFrom(const Coordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.Coordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  return true;
}

void Coordinate::Swap(Coordinate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Coordinate::InternalSwap(Coordinate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lon_, other->lon_);
  swap(lat_, other->lat_);
}

::google::protobuf::Metadata Coordinate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_node_2dbased_2dgraph_2eproto);
  return ::file_level_metadata_node_2dbased_2dgraph_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Nodes::InitAsDefaultInstance() {
}
class Nodes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Nodes::kLatLonFieldNumber;
const int Nodes::kOsmidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Nodes::Nodes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.Nodes)
}
Nodes::Nodes(const Nodes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      latlon_(from.latlon_),
      osmid_(from.osmid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnbg.Nodes)
}

void Nodes::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Nodes_node_2dbased_2dgraph_2eproto.base);
}

Nodes::~Nodes() {
  // @@protoc_insertion_point(destructor:pbnbg.Nodes)
  SharedDtor();
}

void Nodes::SharedDtor() {
}

void Nodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Nodes& Nodes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Nodes_node_2dbased_2dgraph_2eproto.base);
  return *internal_default_instance();
}


void Nodes::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.Nodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latlon_.Clear();
  osmid_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Nodes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Nodes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pbnbg.Coordinate latLon = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pbnbg::Coordinate::_InternalParse;
          object = msg->add_latlon();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // repeated uint64 osmid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
          object = msg->mutable_osmid();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_osmid(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Nodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.Nodes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnbg.Coordinate latLon = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_latlon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 osmid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_osmid())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18u, input, this->mutable_osmid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.Nodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.Nodes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Nodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.Nodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnbg.Coordinate latLon = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->latlon_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->latlon(static_cast<int>(i)),
      output);
  }

  // repeated uint64 osmid = 2;
  if (this->osmid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_osmid_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->osmid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->osmid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnbg.Nodes)
}

::google::protobuf::uint8* Nodes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.Nodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbnbg.Coordinate latLon = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->latlon_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->latlon(static_cast<int>(i)), target);
  }

  // repeated uint64 osmid = 2;
  if (this->osmid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _osmid_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->osmid_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.Nodes)
  return target;
}

size_t Nodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.Nodes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbnbg.Coordinate latLon = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->latlon_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->latlon(static_cast<int>(i)));
    }
  }

  // repeated uint64 osmid = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->osmid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _osmid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Nodes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.Nodes)
  GOOGLE_DCHECK_NE(&from, this);
  const Nodes* source =
      ::google::protobuf::DynamicCastToGenerated<Nodes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.Nodes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.Nodes)
    MergeFrom(*source);
  }
}

void Nodes::MergeFrom(const Nodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.Nodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  latlon_.MergeFrom(from.latlon_);
  osmid_.MergeFrom(from.osmid_);
}

void Nodes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.Nodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Nodes::CopyFrom(const Nodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.Nodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Nodes::IsInitialized() const {
  return true;
}

void Nodes::Swap(Nodes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Nodes::InternalSwap(Nodes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&latlon_)->InternalSwap(CastToBase(&other->latlon_));
  osmid_.InternalSwap(&other->osmid_);
}

::google::protobuf::Metadata Nodes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_node_2dbased_2dgraph_2eproto);
  return ::file_level_metadata_node_2dbased_2dgraph_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CompressedNbg::InitAsDefaultInstance() {
}
class CompressedNbg::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedNbg::kIndexFieldNumber;
const int CompressedNbg::kNodesFieldNumber;
const int CompressedNbg::kForwardWeightsFieldNumber;
const int CompressedNbg::kReverseWeightsFieldNumber;
const int CompressedNbg::kDistancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedNbg::CompressedNbg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.CompressedNbg)
}
CompressedNbg::CompressedNbg(const CompressedNbg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      index_(from.index_),
      nodes_(from.nodes_),
      forward_weights_(from.forward_weights_),
      reverse_weights_(from.reverse_weights_),
      distances_(from.distances_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnbg.CompressedNbg)
}

void CompressedNbg::SharedCtor() {
}

CompressedNbg::~CompressedNbg() {
  // @@protoc_insertion_point(destructor:pbnbg.CompressedNbg)
  SharedDtor();
}

void CompressedNbg::SharedDtor() {
}

void CompressedNbg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompressedNbg& CompressedNbg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CompressedNbg_node_2dbased_2dgraph_2eproto.base);
  return *internal_default_instance();
}


void CompressedNbg::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.CompressedNbg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.Clear();
  nodes_.Clear();
  forward_weights_.Clear();
  reverse_weights_.Clear();
  distances_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompressedNbg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CompressedNbg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 10) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_index();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        do {
          msg->add_index(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
        break;
      }
      // repeated uint32 nodes = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_nodes();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_nodes(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // repeated int32 forward_weights = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_forward_weights();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_forward_weights(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // repeated int32 reverse_weights = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_reverse_weights();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          msg->add_reverse_weights(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      // repeated int32 distances = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_distances();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          msg->add_distances(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompressedNbg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.CompressedNbg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_index())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 nodes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nodes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_nodes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 forward_weights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_forward_weights())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_forward_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 reverse_weights = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reverse_weights())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_reverse_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 distances = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_distances())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_distances())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.CompressedNbg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.CompressedNbg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompressedNbg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.CompressedNbg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 index = 1;
  if (this->index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_index_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->index(i), output);
  }

  // repeated uint32 nodes = 2;
  if (this->nodes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_nodes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->nodes(i), output);
  }

  // repeated int32 forward_weights = 3;
  if (this->forward_weights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_forward_weights_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->forward_weights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->forward_weights(i), output);
  }

  // repeated int32 reverse_weights = 4;
  if (this->reverse_weights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_reverse_weights_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->reverse_weights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->reverse_weights(i), output);
  }

  // repeated int32 distances = 5;
  if (this->distances_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_distances_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->distances_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->distances(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnbg.CompressedNbg)
}

::google::protobuf::uint8* CompressedNbg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.CompressedNbg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 index = 1;
  if (this->index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _index_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->index_, target);
  }

  // repeated uint32 nodes = 2;
  if (this->nodes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _nodes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->nodes_, target);
  }

  // repeated int32 forward_weights = 3;
  if (this->forward_weights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _forward_weights_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->forward_weights_, target);
  }

  // repeated int32 reverse_weights = 4;
  if (this->reverse_weights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _reverse_weights_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->reverse_weights_, target);
  }

  // repeated int32 distances = 5;
  if (this->distances_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _distances_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->distances_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.CompressedNbg)
  return target;
}

size_t CompressedNbg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.CompressedNbg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 index = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->index_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 nodes = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->nodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _nodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 forward_weights = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->forward_weights_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _forward_weights_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 reverse_weights = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->reverse_weights_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _reverse_weights_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 distances = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->distances_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _distances_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompressedNbg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.CompressedNbg)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedNbg* source =
      ::google::protobuf::DynamicCastToGenerated<CompressedNbg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.CompressedNbg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.CompressedNbg)
    MergeFrom(*source);
  }
}

void CompressedNbg::MergeFrom(const CompressedNbg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.CompressedNbg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  index_.MergeFrom(from.index_);
  nodes_.MergeFrom(from.nodes_);
  forward_weights_.MergeFrom(from.forward_weights_);
  reverse_weights_.MergeFrom(from.reverse_weights_);
  distances_.MergeFrom(from.distances_);
}

void CompressedNbg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.CompressedNbg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedNbg::CopyFrom(const CompressedNbg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.CompressedNbg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedNbg::IsInitialized() const {
  return true;
}

void CompressedNbg::Swap(CompressedNbg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedNbg::InternalSwap(CompressedNbg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  index_.InternalSwap(&other->index_);
  nodes_.InternalSwap(&other->nodes_);
  forward_weights_.InternalSwap(&other->forward_weights_);
  reverse_weights_.InternalSwap(&other->reverse_weights_);
  distances_.InternalSwap(&other->distances_);
}

::google::protobuf::Metadata CompressedNbg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_node_2dbased_2dgraph_2eproto);
  return ::file_level_metadata_node_2dbased_2dgraph_2eproto[kIndexInFileMessages];
}


// ===================================================================

void StreetNames::InitAsDefaultInstance() {
}
class StreetNames::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreetNames::kNamesPackedFieldNumber;
const int StreetNames::kNameOffsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreetNames::StreetNames()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.StreetNames)
}
StreetNames::StreetNames(const StreetNames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      name_offsets_(from.name_offsets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  names_packed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.names_packed().size() > 0) {
    names_packed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.names_packed_);
  }
  // @@protoc_insertion_point(copy_constructor:pbnbg.StreetNames)
}

void StreetNames::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_StreetNames_node_2dbased_2dgraph_2eproto.base);
  names_packed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

StreetNames::~StreetNames() {
  // @@protoc_insertion_point(destructor:pbnbg.StreetNames)
  SharedDtor();
}

void StreetNames::SharedDtor() {
  names_packed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreetNames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreetNames& StreetNames::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_StreetNames_node_2dbased_2dgraph_2eproto.base);
  return *internal_default_instance();
}


void StreetNames::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.StreetNames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_offsets_.Clear();
  names_packed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreetNames::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<StreetNames*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string names_packed = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("pbnbg.StreetNames.names_packed");
        object = msg->mutable_names_packed();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated uint32 name_offsets = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_name_offsets();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_name_offsets(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreetNames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.StreetNames)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string names_packed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_names_packed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names_packed().data(), static_cast<int>(this->names_packed().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pbnbg.StreetNames.names_packed"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 name_offsets = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_name_offsets())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_name_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.StreetNames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.StreetNames)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreetNames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.StreetNames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string names_packed = 1;
  if (this->names_packed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names_packed().data(), static_cast<int>(this->names_packed().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pbnbg.StreetNames.names_packed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->names_packed(), output);
  }

  // repeated uint32 name_offsets = 2;
  if (this->name_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_name_offsets_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->name_offsets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->name_offsets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbnbg.StreetNames)
}

::google::protobuf::uint8* StreetNames::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.StreetNames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string names_packed = 1;
  if (this->names_packed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names_packed().data(), static_cast<int>(this->names_packed().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pbnbg.StreetNames.names_packed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->names_packed(), target);
  }

  // repeated uint32 name_offsets = 2;
  if (this->name_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _name_offsets_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->name_offsets_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.StreetNames)
  return target;
}

size_t StreetNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.StreetNames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 name_offsets = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->name_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _name_offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string names_packed = 1;
  if (this->names_packed().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->names_packed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreetNames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.StreetNames)
  GOOGLE_DCHECK_NE(&from, this);
  const StreetNames* source =
      ::google::protobuf::DynamicCastToGenerated<StreetNames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.StreetNames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.StreetNames)
    MergeFrom(*source);
  }
}

void StreetNames::MergeFrom(const StreetNames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.StreetNames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_offsets_.MergeFrom(from.name_offsets_);
  if (from.names_packed().size() > 0) {

    names_packed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.names_packed_);
  }
}

void StreetNames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.StreetNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetNames::CopyFrom(const StreetNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.StreetNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetNames::IsInitialized() const {
  return true;
}

void StreetNames::Swap(StreetNames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreetNames::InternalSwap(StreetNames* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_offsets_.InternalSwap(&other->name_offsets_);
  names_packed_.Swap(&other->names_packed_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata StreetNames::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_node_2dbased_2dgraph_2eproto);
  return ::file_level_metadata_node_2dbased_2dgraph_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pbnbg
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pbnbg::Coordinate* Arena::CreateMaybeMessage< ::pbnbg::Coordinate >(Arena* arena) {
  return Arena::CreateInternal< ::pbnbg::Coordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnbg::Nodes* Arena::CreateMaybeMessage< ::pbnbg::Nodes >(Arena* arena) {
  return Arena::CreateInternal< ::pbnbg::Nodes >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnbg::CompressedNbg* Arena::CreateMaybeMessage< ::pbnbg::CompressedNbg >(Arena* arena) {
  return Arena::CreateInternal< ::pbnbg::CompressedNbg >(arena);
}
template<> PROTOBUF_NOINLINE ::pbnbg::StreetNames* Arena::CreateMaybeMessage< ::pbnbg::StreetNames >(Arena* arena) {
  return Arena::CreateInternal< ::pbnbg::StreetNames >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
