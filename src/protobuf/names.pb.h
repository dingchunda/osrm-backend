// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: names.proto

#ifndef PROTOBUF_names_2eproto__INCLUDED
#define PROTOBUF_names_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_names_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsNameImpl();
void InitDefaultsName();
inline void InitDefaults() {
  InitDefaultsName();
}
}  // namespace protobuf_names_2eproto
namespace pbmldnames {
class Name;
class NameDefaultTypeInternal;
extern NameDefaultTypeInternal _Name_default_instance_;
}  // namespace pbmldnames
namespace pbmldnames {

// ===================================================================

class Name : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbmldnames.Name) */ {
 public:
  Name();
  virtual ~Name();

  Name(const Name& from);

  inline Name& operator=(const Name& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Name(Name&& from) noexcept
    : Name() {
    *this = ::std::move(from);
  }

  inline Name& operator=(Name&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Name& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Name* internal_default_instance() {
    return reinterpret_cast<const Name*>(
               &_Name_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Name* other);
  friend void swap(Name& a, Name& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Name* New() const PROTOBUF_FINAL { return New(NULL); }

  Name* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Name& from);
  void MergeFrom(const Name& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Name* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 offset = 1;
  int offset_size() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::uint32 offset(int index) const;
  void set_offset(int index, ::google::protobuf::uint32 value);
  void add_offset(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      offset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_offset();

  // optional string names_packed = 2;
  bool has_names_packed() const;
  void clear_names_packed();
  static const int kNamesPackedFieldNumber = 2;
  const ::std::string& names_packed() const;
  void set_names_packed(const ::std::string& value);
  #if LANG_CXX11
  void set_names_packed(::std::string&& value);
  #endif
  void set_names_packed(const char* value);
  void set_names_packed(const char* value, size_t size);
  ::std::string* mutable_names_packed();
  ::std::string* release_names_packed();
  void set_allocated_names_packed(::std::string* names_packed);

  // @@protoc_insertion_point(class_scope:pbmldnames.Name)
 private:
  void set_has_names_packed();
  void clear_has_names_packed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > offset_;
  ::google::protobuf::internal::ArenaStringPtr names_packed_;
  friend struct ::protobuf_names_2eproto::TableStruct;
  friend void ::protobuf_names_2eproto::InitDefaultsNameImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Name

// repeated uint32 offset = 1;
inline int Name::offset_size() const {
  return offset_.size();
}
inline void Name::clear_offset() {
  offset_.Clear();
}
inline ::google::protobuf::uint32 Name::offset(int index) const {
  // @@protoc_insertion_point(field_get:pbmldnames.Name.offset)
  return offset_.Get(index);
}
inline void Name::set_offset(int index, ::google::protobuf::uint32 value) {
  offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbmldnames.Name.offset)
}
inline void Name::add_offset(::google::protobuf::uint32 value) {
  offset_.Add(value);
  // @@protoc_insertion_point(field_add:pbmldnames.Name.offset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Name::offset() const {
  // @@protoc_insertion_point(field_list:pbmldnames.Name.offset)
  return offset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Name::mutable_offset() {
  // @@protoc_insertion_point(field_mutable_list:pbmldnames.Name.offset)
  return &offset_;
}

// optional string names_packed = 2;
inline bool Name::has_names_packed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Name::set_has_names_packed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Name::clear_has_names_packed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Name::clear_names_packed() {
  names_packed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_names_packed();
}
inline const ::std::string& Name::names_packed() const {
  // @@protoc_insertion_point(field_get:pbmldnames.Name.names_packed)
  return names_packed_.GetNoArena();
}
inline void Name::set_names_packed(const ::std::string& value) {
  set_has_names_packed();
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbmldnames.Name.names_packed)
}
#if LANG_CXX11
inline void Name::set_names_packed(::std::string&& value) {
  set_has_names_packed();
  names_packed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbmldnames.Name.names_packed)
}
#endif
inline void Name::set_names_packed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_names_packed();
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbmldnames.Name.names_packed)
}
inline void Name::set_names_packed(const char* value, size_t size) {
  set_has_names_packed();
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbmldnames.Name.names_packed)
}
inline ::std::string* Name::mutable_names_packed() {
  set_has_names_packed();
  // @@protoc_insertion_point(field_mutable:pbmldnames.Name.names_packed)
  return names_packed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Name::release_names_packed() {
  // @@protoc_insertion_point(field_release:pbmldnames.Name.names_packed)
  clear_has_names_packed();
  return names_packed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Name::set_allocated_names_packed(::std::string* names_packed) {
  if (names_packed != NULL) {
    set_has_names_packed();
  } else {
    clear_has_names_packed();
  }
  names_packed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), names_packed);
  // @@protoc_insertion_point(field_set_allocated:pbmldnames.Name.names_packed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbmldnames

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_names_2eproto__INCLUDED
