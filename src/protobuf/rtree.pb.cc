// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtree.proto

#include "rtree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_rtree_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rectangle_rtree_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtree_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Segment_rtree_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rtree_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LeafNode_rtree_2eproto;
namespace pbrtree {
class SegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Segment> _instance;
} _Segment_default_instance_;
class RectangleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rectangle> _instance;
} _Rectangle_default_instance_;
class LeafNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LeafNode> _instance;
} _LeafNode_default_instance_;
class LeavesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Leaves> _instance;
} _Leaves_default_instance_;
class SegmentsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Segments> _instance;
} _Segments_default_instance_;
}  // namespace pbrtree
static void InitDefaultsSegment_rtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbrtree::_Segment_default_instance_;
    new (ptr) ::pbrtree::Segment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbrtree::Segment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Segment_rtree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSegment_rtree_2eproto}, {}};

static void InitDefaultsRectangle_rtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbrtree::_Rectangle_default_instance_;
    new (ptr) ::pbrtree::Rectangle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbrtree::Rectangle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rectangle_rtree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRectangle_rtree_2eproto}, {}};

static void InitDefaultsLeafNode_rtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbrtree::_LeafNode_default_instance_;
    new (ptr) ::pbrtree::LeafNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbrtree::LeafNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LeafNode_rtree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLeafNode_rtree_2eproto}, {
      &scc_info_Rectangle_rtree_2eproto.base,}};

static void InitDefaultsLeaves_rtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbrtree::_Leaves_default_instance_;
    new (ptr) ::pbrtree::Leaves();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbrtree::Leaves::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Leaves_rtree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLeaves_rtree_2eproto}, {
      &scc_info_LeafNode_rtree_2eproto.base,}};

static void InitDefaultsSegments_rtree_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::pbrtree::_Segments_default_instance_;
    new (ptr) ::pbrtree::Segments();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbrtree::Segments::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Segments_rtree_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSegments_rtree_2eproto}, {
      &scc_info_Segment_rtree_2eproto.base,}};

void InitDefaults_rtree_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Segment_rtree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rectangle_rtree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LeafNode_rtree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Leaves_rtree_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Segments_rtree_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_rtree_2eproto[5];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_rtree_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_rtree_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_rtree_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbrtree::Segment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbrtree::Segment, u_),
  PROTOBUF_FIELD_OFFSET(::pbrtree::Segment, v_),
  PROTOBUF_FIELD_OFFSET(::pbrtree::Segment, forward_segment_id_),
  PROTOBUF_FIELD_OFFSET(::pbrtree::Segment, reverse_segment_id_),
  PROTOBUF_FIELD_OFFSET(::pbrtree::Segment, forward_segment_position_),
  PROTOBUF_FIELD_OFFSET(::pbrtree::Segment, forward_enabled_),
  PROTOBUF_FIELD_OFFSET(::pbrtree::Segment, reverse_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbrtree::Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbrtree::Rectangle, min_lat_),
  PROTOBUF_FIELD_OFFSET(::pbrtree::Rectangle, min_lon_),
  PROTOBUF_FIELD_OFFSET(::pbrtree::Rectangle, max_lat_),
  PROTOBUF_FIELD_OFFSET(::pbrtree::Rectangle, max_lon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbrtree::LeafNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbrtree::LeafNode, minimum_bounding_rectangle_),
  PROTOBUF_FIELD_OFFSET(::pbrtree::LeafNode, indexstart_),
  PROTOBUF_FIELD_OFFSET(::pbrtree::LeafNode, indexend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbrtree::Leaves, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbrtree::Leaves, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pbrtree::Segments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pbrtree::Segments, items_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pbrtree::Segment)},
  { 12, -1, sizeof(::pbrtree::Rectangle)},
  { 21, -1, sizeof(::pbrtree::LeafNode)},
  { 29, -1, sizeof(::pbrtree::Leaves)},
  { 35, -1, sizeof(::pbrtree::Segments)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbrtree::_Segment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbrtree::_Rectangle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbrtree::_LeafNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbrtree::_Leaves_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbrtree::_Segments_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_rtree_2eproto = {
  {}, AddDescriptors_rtree_2eproto, "rtree.proto", schemas,
  file_default_instances, TableStruct_rtree_2eproto::offsets,
  file_level_metadata_rtree_2eproto, 5, file_level_enum_descriptors_rtree_2eproto, file_level_service_descriptors_rtree_2eproto,
};

const char descriptor_table_protodef_rtree_2eproto[] =
  "\n\013rtree.proto\022\007pbrtree\"\253\001\n\007Segment\022\t\n\001u\030"
  "\001 \001(\r\022\t\n\001v\030\002 \001(\r\022\032\n\022forward_segment_id\030\003"
  " \001(\r\022\032\n\022reverse_segment_id\030\004 \001(\r\022 \n\030forw"
  "ard_segment_position\030\005 \001(\r\022\027\n\017forward_en"
  "abled\030\006 \001(\010\022\027\n\017reverse_enabled\030\007 \001(\010\"O\n\t"
  "Rectangle\022\017\n\007min_lat\030\001 \001(\004\022\017\n\007min_lon\030\002 "
  "\001(\004\022\017\n\007max_lat\030\003 \001(\004\022\017\n\007max_lon\030\004 \001(\004\"h\n"
  "\010LeafNode\0226\n\032minimum_bounding_rectangle\030"
  "\001 \001(\0132\022.pbrtree.Rectangle\022\022\n\nindexStart\030"
  "\002 \001(\r\022\020\n\010indexEnd\030\003 \001(\r\"*\n\006Leaves\022 \n\005ite"
  "ms\030\001 \003(\0132\021.pbrtree.LeafNode\"+\n\010Segments\022"
  "\037\n\005items\030\001 \003(\0132\020.pbrtree.Segmentb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_rtree_2eproto = {
  false, InitDefaults_rtree_2eproto, 
  descriptor_table_protodef_rtree_2eproto,
  "rtree.proto", &assign_descriptors_table_rtree_2eproto, 480,
};

void AddDescriptors_rtree_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_rtree_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rtree_2eproto = []() { AddDescriptors_rtree_2eproto(); return true; }();
namespace pbrtree {

// ===================================================================

void Segment::InitAsDefaultInstance() {
}
class Segment::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segment::kUFieldNumber;
const int Segment::kVFieldNumber;
const int Segment::kForwardSegmentIdFieldNumber;
const int Segment::kReverseSegmentIdFieldNumber;
const int Segment::kForwardSegmentPositionFieldNumber;
const int Segment::kForwardEnabledFieldNumber;
const int Segment::kReverseEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segment::Segment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.Segment)
}
Segment::Segment(const Segment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&u_, &from.u_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverse_enabled_) -
    reinterpret_cast<char*>(&u_)) + sizeof(reverse_enabled_));
  // @@protoc_insertion_point(copy_constructor:pbrtree.Segment)
}

void Segment::SharedCtor() {
  ::memset(&u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_enabled_) -
      reinterpret_cast<char*>(&u_)) + sizeof(reverse_enabled_));
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:pbrtree.Segment)
  SharedDtor();
}

void Segment::SharedDtor() {
}

void Segment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Segment& Segment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Segment_rtree_2eproto.base);
  return *internal_default_instance();
}


void Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverse_enabled_) -
      reinterpret_cast<char*>(&u_)) + sizeof(reverse_enabled_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Segment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Segment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 u = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_u(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 v = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_v(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 forward_segment_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_forward_segment_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 reverse_segment_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_reverse_segment_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 forward_segment_position = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_forward_segment_position(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool forward_enabled = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_forward_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool reverse_enabled = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_reverse_enabled(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.Segment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 u = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 v = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 forward_segment_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forward_segment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reverse_segment_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reverse_segment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 forward_segment_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forward_segment_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool forward_enabled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reverse_enabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.Segment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 u = 1;
  if (this->u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->u(), output);
  }

  // uint32 v = 2;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->v(), output);
  }

  // uint32 forward_segment_id = 3;
  if (this->forward_segment_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->forward_segment_id(), output);
  }

  // uint32 reverse_segment_id = 4;
  if (this->reverse_segment_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reverse_segment_id(), output);
  }

  // uint32 forward_segment_position = 5;
  if (this->forward_segment_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->forward_segment_position(), output);
  }

  // bool forward_enabled = 6;
  if (this->forward_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->forward_enabled(), output);
  }

  // bool reverse_enabled = 7;
  if (this->reverse_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->reverse_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrtree.Segment)
}

::google::protobuf::uint8* Segment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.Segment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 u = 1;
  if (this->u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->u(), target);
  }

  // uint32 v = 2;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->v(), target);
  }

  // uint32 forward_segment_id = 3;
  if (this->forward_segment_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->forward_segment_id(), target);
  }

  // uint32 reverse_segment_id = 4;
  if (this->reverse_segment_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reverse_segment_id(), target);
  }

  // uint32 forward_segment_position = 5;
  if (this->forward_segment_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->forward_segment_position(), target);
  }

  // bool forward_enabled = 6;
  if (this->forward_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->forward_enabled(), target);
  }

  // bool reverse_enabled = 7;
  if (this->reverse_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->reverse_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.Segment)
  return target;
}

size_t Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.Segment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 u = 1;
  if (this->u() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->u());
  }

  // uint32 v = 2;
  if (this->v() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->v());
  }

  // uint32 forward_segment_id = 3;
  if (this->forward_segment_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->forward_segment_id());
  }

  // uint32 reverse_segment_id = 4;
  if (this->reverse_segment_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reverse_segment_id());
  }

  // uint32 forward_segment_position = 5;
  if (this->forward_segment_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->forward_segment_position());
  }

  // bool forward_enabled = 6;
  if (this->forward_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool reverse_enabled = 7;
  if (this->reverse_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Segment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  const Segment* source =
      ::google::protobuf::DynamicCastToGenerated<Segment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.Segment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.Segment)
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.Segment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u() != 0) {
    set_u(from.u());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.forward_segment_id() != 0) {
    set_forward_segment_id(from.forward_segment_id());
  }
  if (from.reverse_segment_id() != 0) {
    set_reverse_segment_id(from.reverse_segment_id());
  }
  if (from.forward_segment_position() != 0) {
    set_forward_segment_position(from.forward_segment_position());
  }
  if (from.forward_enabled() != 0) {
    set_forward_enabled(from.forward_enabled());
  }
  if (from.reverse_enabled() != 0) {
    set_reverse_enabled(from.reverse_enabled());
  }
}

void Segment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  return true;
}

void Segment::Swap(Segment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segment::InternalSwap(Segment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(u_, other->u_);
  swap(v_, other->v_);
  swap(forward_segment_id_, other->forward_segment_id_);
  swap(reverse_segment_id_, other->reverse_segment_id_);
  swap(forward_segment_position_, other->forward_segment_position_);
  swap(forward_enabled_, other->forward_enabled_);
  swap(reverse_enabled_, other->reverse_enabled_);
}

::google::protobuf::Metadata Segment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rtree_2eproto);
  return ::file_level_metadata_rtree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rectangle::InitAsDefaultInstance() {
}
class Rectangle::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rectangle::kMinLatFieldNumber;
const int Rectangle::kMinLonFieldNumber;
const int Rectangle::kMaxLatFieldNumber;
const int Rectangle::kMaxLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rectangle::Rectangle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_lat_, &from.min_lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_lon_) -
    reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
  // @@protoc_insertion_point(copy_constructor:pbrtree.Rectangle)
}

void Rectangle::SharedCtor() {
  ::memset(&min_lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_lon_) -
      reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:pbrtree.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
}

void Rectangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rectangle& Rectangle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rectangle_rtree_2eproto.base);
  return *internal_default_instance();
}


void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_lon_) -
      reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rectangle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rectangle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 min_lat = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_min_lat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 min_lon = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_min_lon(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 max_lat = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_max_lat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 max_lon = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_max_lon(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.Rectangle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 min_lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 min_lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_lat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_lon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.Rectangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.Rectangle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min_lat = 1;
  if (this->min_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_lat(), output);
  }

  // uint64 min_lon = 2;
  if (this->min_lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->min_lon(), output);
  }

  // uint64 max_lat = 3;
  if (this->max_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->max_lat(), output);
  }

  // uint64 max_lon = 4;
  if (this->max_lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_lon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrtree.Rectangle)
}

::google::protobuf::uint8* Rectangle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min_lat = 1;
  if (this->min_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_lat(), target);
  }

  // uint64 min_lon = 2;
  if (this->min_lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->min_lon(), target);
  }

  // uint64 max_lat = 3;
  if (this->max_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->max_lat(), target);
  }

  // uint64 max_lon = 4;
  if (this->max_lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_lon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.Rectangle)
  return target;
}

size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.Rectangle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 min_lat = 1;
  if (this->min_lat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_lat());
  }

  // uint64 min_lon = 2;
  if (this->min_lon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_lon());
  }

  // uint64 max_lat = 3;
  if (this->max_lat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_lat());
  }

  // uint64 max_lon = 4;
  if (this->max_lon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_lon());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rectangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle* source =
      ::google::protobuf::DynamicCastToGenerated<Rectangle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.Rectangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.Rectangle)
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_lat() != 0) {
    set_min_lat(from.min_lat());
  }
  if (from.min_lon() != 0) {
    set_min_lon(from.min_lon());
  }
  if (from.max_lat() != 0) {
    set_max_lat(from.max_lat());
  }
  if (from.max_lon() != 0) {
    set_max_lon(from.max_lon());
  }
}

void Rectangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  return true;
}

void Rectangle::Swap(Rectangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_lat_, other->min_lat_);
  swap(min_lon_, other->min_lon_);
  swap(max_lat_, other->max_lat_);
  swap(max_lon_, other->max_lon_);
}

::google::protobuf::Metadata Rectangle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rtree_2eproto);
  return ::file_level_metadata_rtree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LeafNode::InitAsDefaultInstance() {
  ::pbrtree::_LeafNode_default_instance_._instance.get_mutable()->minimum_bounding_rectangle_ = const_cast< ::pbrtree::Rectangle*>(
      ::pbrtree::Rectangle::internal_default_instance());
}
class LeafNode::HasBitSetters {
 public:
  static const ::pbrtree::Rectangle& minimum_bounding_rectangle(const LeafNode* msg);
};

const ::pbrtree::Rectangle&
LeafNode::HasBitSetters::minimum_bounding_rectangle(const LeafNode* msg) {
  return *msg->minimum_bounding_rectangle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeafNode::kMinimumBoundingRectangleFieldNumber;
const int LeafNode::kIndexStartFieldNumber;
const int LeafNode::kIndexEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeafNode::LeafNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.LeafNode)
}
LeafNode::LeafNode(const LeafNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_minimum_bounding_rectangle()) {
    minimum_bounding_rectangle_ = new ::pbrtree::Rectangle(*from.minimum_bounding_rectangle_);
  } else {
    minimum_bounding_rectangle_ = nullptr;
  }
  ::memcpy(&indexstart_, &from.indexstart_,
    static_cast<size_t>(reinterpret_cast<char*>(&indexend_) -
    reinterpret_cast<char*>(&indexstart_)) + sizeof(indexend_));
  // @@protoc_insertion_point(copy_constructor:pbrtree.LeafNode)
}

void LeafNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LeafNode_rtree_2eproto.base);
  ::memset(&minimum_bounding_rectangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indexend_) -
      reinterpret_cast<char*>(&minimum_bounding_rectangle_)) + sizeof(indexend_));
}

LeafNode::~LeafNode() {
  // @@protoc_insertion_point(destructor:pbrtree.LeafNode)
  SharedDtor();
}

void LeafNode::SharedDtor() {
  if (this != internal_default_instance()) delete minimum_bounding_rectangle_;
}

void LeafNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeafNode& LeafNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LeafNode_rtree_2eproto.base);
  return *internal_default_instance();
}


void LeafNode::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.LeafNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && minimum_bounding_rectangle_ != nullptr) {
    delete minimum_bounding_rectangle_;
  }
  minimum_bounding_rectangle_ = nullptr;
  ::memset(&indexstart_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&indexend_) -
      reinterpret_cast<char*>(&indexstart_)) + sizeof(indexend_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LeafNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LeafNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .pbrtree.Rectangle minimum_bounding_rectangle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::pbrtree::Rectangle::_InternalParse;
        object = msg->mutable_minimum_bounding_rectangle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // uint32 indexStart = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_indexstart(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 indexEnd = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_indexend(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LeafNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.LeafNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pbrtree.Rectangle minimum_bounding_rectangle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_minimum_bounding_rectangle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 indexStart = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 indexEnd = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &indexend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.LeafNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.LeafNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LeafNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.LeafNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbrtree.Rectangle minimum_bounding_rectangle = 1;
  if (this->has_minimum_bounding_rectangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::minimum_bounding_rectangle(this), output);
  }

  // uint32 indexStart = 2;
  if (this->indexstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->indexstart(), output);
  }

  // uint32 indexEnd = 3;
  if (this->indexend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->indexend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrtree.LeafNode)
}

::google::protobuf::uint8* LeafNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.LeafNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pbrtree.Rectangle minimum_bounding_rectangle = 1;
  if (this->has_minimum_bounding_rectangle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::minimum_bounding_rectangle(this), target);
  }

  // uint32 indexStart = 2;
  if (this->indexstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->indexstart(), target);
  }

  // uint32 indexEnd = 3;
  if (this->indexend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->indexend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.LeafNode)
  return target;
}

size_t LeafNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.LeafNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pbrtree.Rectangle minimum_bounding_rectangle = 1;
  if (this->has_minimum_bounding_rectangle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *minimum_bounding_rectangle_);
  }

  // uint32 indexStart = 2;
  if (this->indexstart() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->indexstart());
  }

  // uint32 indexEnd = 3;
  if (this->indexend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->indexend());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeafNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.LeafNode)
  GOOGLE_DCHECK_NE(&from, this);
  const LeafNode* source =
      ::google::protobuf::DynamicCastToGenerated<LeafNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.LeafNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.LeafNode)
    MergeFrom(*source);
  }
}

void LeafNode::MergeFrom(const LeafNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.LeafNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_minimum_bounding_rectangle()) {
    mutable_minimum_bounding_rectangle()->::pbrtree::Rectangle::MergeFrom(from.minimum_bounding_rectangle());
  }
  if (from.indexstart() != 0) {
    set_indexstart(from.indexstart());
  }
  if (from.indexend() != 0) {
    set_indexend(from.indexend());
  }
}

void LeafNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.LeafNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafNode::CopyFrom(const LeafNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.LeafNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafNode::IsInitialized() const {
  return true;
}

void LeafNode::Swap(LeafNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeafNode::InternalSwap(LeafNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(minimum_bounding_rectangle_, other->minimum_bounding_rectangle_);
  swap(indexstart_, other->indexstart_);
  swap(indexend_, other->indexend_);
}

::google::protobuf::Metadata LeafNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rtree_2eproto);
  return ::file_level_metadata_rtree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Leaves::InitAsDefaultInstance() {
}
class Leaves::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leaves::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leaves::Leaves()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.Leaves)
}
Leaves::Leaves(const Leaves& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbrtree.Leaves)
}

void Leaves::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Leaves_rtree_2eproto.base);
}

Leaves::~Leaves() {
  // @@protoc_insertion_point(destructor:pbrtree.Leaves)
  SharedDtor();
}

void Leaves::SharedDtor() {
}

void Leaves::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Leaves& Leaves::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Leaves_rtree_2eproto.base);
  return *internal_default_instance();
}


void Leaves::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.Leaves)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Leaves::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Leaves*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pbrtree.LeafNode items = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pbrtree::LeafNode::_InternalParse;
          object = msg->add_items();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Leaves::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.Leaves)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbrtree.LeafNode items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.Leaves)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.Leaves)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Leaves::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.Leaves)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbrtree.LeafNode items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrtree.Leaves)
}

::google::protobuf::uint8* Leaves::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.Leaves)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbrtree.LeafNode items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->items(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.Leaves)
  return target;
}

size_t Leaves::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.Leaves)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbrtree.LeafNode items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Leaves::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.Leaves)
  GOOGLE_DCHECK_NE(&from, this);
  const Leaves* source =
      ::google::protobuf::DynamicCastToGenerated<Leaves>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.Leaves)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.Leaves)
    MergeFrom(*source);
  }
}

void Leaves::MergeFrom(const Leaves& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.Leaves)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void Leaves::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.Leaves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaves::CopyFrom(const Leaves& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.Leaves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leaves::IsInitialized() const {
  return true;
}

void Leaves::Swap(Leaves* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Leaves::InternalSwap(Leaves* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
}

::google::protobuf::Metadata Leaves::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rtree_2eproto);
  return ::file_level_metadata_rtree_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Segments::InitAsDefaultInstance() {
}
class Segments::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segments::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segments::Segments()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.Segments)
}
Segments::Segments(const Segments& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbrtree.Segments)
}

void Segments::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Segments_rtree_2eproto.base);
}

Segments::~Segments() {
  // @@protoc_insertion_point(destructor:pbrtree.Segments)
  SharedDtor();
}

void Segments::SharedDtor() {
}

void Segments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Segments& Segments::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Segments_rtree_2eproto.base);
  return *internal_default_instance();
}


void Segments::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.Segments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Segments::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Segments*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .pbrtree.Segment items = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::pbrtree::Segment::_InternalParse;
          object = msg->add_items();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Segments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.Segments)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbrtree.Segment items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.Segments)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.Segments)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Segments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.Segments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbrtree.Segment items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbrtree.Segments)
}

::google::protobuf::uint8* Segments::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.Segments)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbrtree.Segment items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->items(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.Segments)
  return target;
}

size_t Segments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.Segments)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pbrtree.Segment items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->items(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Segments::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.Segments)
  GOOGLE_DCHECK_NE(&from, this);
  const Segments* source =
      ::google::protobuf::DynamicCastToGenerated<Segments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.Segments)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.Segments)
    MergeFrom(*source);
  }
}

void Segments::MergeFrom(const Segments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.Segments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void Segments::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.Segments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segments::CopyFrom(const Segments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.Segments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segments::IsInitialized() const {
  return true;
}

void Segments::Swap(Segments* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Segments::InternalSwap(Segments* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&items_)->InternalSwap(CastToBase(&other->items_));
}

::google::protobuf::Metadata Segments::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rtree_2eproto);
  return ::file_level_metadata_rtree_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pbrtree
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::pbrtree::Segment* Arena::CreateMaybeMessage< ::pbrtree::Segment >(Arena* arena) {
  return Arena::CreateInternal< ::pbrtree::Segment >(arena);
}
template<> PROTOBUF_NOINLINE ::pbrtree::Rectangle* Arena::CreateMaybeMessage< ::pbrtree::Rectangle >(Arena* arena) {
  return Arena::CreateInternal< ::pbrtree::Rectangle >(arena);
}
template<> PROTOBUF_NOINLINE ::pbrtree::LeafNode* Arena::CreateMaybeMessage< ::pbrtree::LeafNode >(Arena* arena) {
  return Arena::CreateInternal< ::pbrtree::LeafNode >(arena);
}
template<> PROTOBUF_NOINLINE ::pbrtree::Leaves* Arena::CreateMaybeMessage< ::pbrtree::Leaves >(Arena* arena) {
  return Arena::CreateInternal< ::pbrtree::Leaves >(arena);
}
template<> PROTOBUF_NOINLINE ::pbrtree::Segments* Arena::CreateMaybeMessage< ::pbrtree::Segments >(Arena* arena) {
  return Arena::CreateInternal< ::pbrtree::Segments >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
