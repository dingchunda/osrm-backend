// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtree.proto

#include "rtree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace pbmldrtree {
class EdgeBasedNodeSegmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EdgeBasedNodeSegment>
      _instance;
} _EdgeBasedNodeSegment_default_instance_;
class RectangleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rectangle>
      _instance;
} _Rectangle_default_instance_;
class RTreeNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RTreeNode>
      _instance;
} _RTreeNode_default_instance_;
class RTreeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RTree>
      _instance;
} _RTree_default_instance_;
}  // namespace pbmldrtree
namespace protobuf_rtree_2eproto {
void InitDefaultsEdgeBasedNodeSegmentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pbmldrtree::_EdgeBasedNodeSegment_default_instance_;
    new (ptr) ::pbmldrtree::EdgeBasedNodeSegment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbmldrtree::EdgeBasedNodeSegment::InitAsDefaultInstance();
}

void InitDefaultsEdgeBasedNodeSegment() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEdgeBasedNodeSegmentImpl);
}

void InitDefaultsRectangleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::pbmldrtree::_Rectangle_default_instance_;
    new (ptr) ::pbmldrtree::Rectangle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbmldrtree::Rectangle::InitAsDefaultInstance();
}

void InitDefaultsRectangle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRectangleImpl);
}

void InitDefaultsRTreeNodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_rtree_2eproto::InitDefaultsRectangle();
  protobuf_rtree_2eproto::InitDefaultsEdgeBasedNodeSegment();
  {
    void* ptr = &::pbmldrtree::_RTreeNode_default_instance_;
    new (ptr) ::pbmldrtree::RTreeNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbmldrtree::RTreeNode::InitAsDefaultInstance();
}

void InitDefaultsRTreeNode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRTreeNodeImpl);
}

void InitDefaultsRTreeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_rtree_2eproto::InitDefaultsRTreeNode();
  {
    void* ptr = &::pbmldrtree::_RTree_default_instance_;
    new (ptr) ::pbmldrtree::RTree();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pbmldrtree::RTree::InitAsDefaultInstance();
}

void InitDefaultsRTree() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRTreeImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::EdgeBasedNodeSegment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::EdgeBasedNodeSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::EdgeBasedNodeSegment, u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::EdgeBasedNodeSegment, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::EdgeBasedNodeSegment, forward_segment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::EdgeBasedNodeSegment, reverse_segment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::EdgeBasedNodeSegment, fwd_segment_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::EdgeBasedNodeSegment, forwardenabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::EdgeBasedNodeSegment, reverseenabled_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::Rectangle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::Rectangle, min_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::Rectangle, min_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::Rectangle, max_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::Rectangle, max_lon_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::RTreeNode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::RTreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::RTreeNode, itemcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::RTreeNode, rect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::RTreeNode, segments_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::RTree, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::RTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::pbmldrtree::RTree, node_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::pbmldrtree::EdgeBasedNodeSegment)},
  { 19, 28, sizeof(::pbmldrtree::Rectangle)},
  { 32, 40, sizeof(::pbmldrtree::RTreeNode)},
  { 43, 49, sizeof(::pbmldrtree::RTree)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbmldrtree::_EdgeBasedNodeSegment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbmldrtree::_Rectangle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbmldrtree::_RTreeNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::pbmldrtree::_RTree_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rtree.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013rtree.proto\022\npbmldrtree\"\262\001\n\024EdgeBasedN"
      "odeSegment\022\t\n\001u\030\001 \001(\r\022\t\n\001v\030\002 \001(\r\022\032\n\022forw"
      "ard_segment_id\030\003 \001(\r\022\032\n\022reverse_segment_"
      "id\030\004 \001(\r\022\034\n\024fwd_segment_position\030\005 \001(\r\022\026"
      "\n\016forwardEnabled\030\006 \001(\r\022\026\n\016reverseEnabled"
      "\030\007 \001(\r\"O\n\tRectangle\022\017\n\007min_lat\030\001 \001(\022\022\017\n\007"
      "min_lon\030\002 \001(\022\022\017\n\007max_lat\030\003 \001(\022\022\017\n\007max_lo"
      "n\030\004 \001(\022\"w\n\tRTreeNode\022\021\n\titemCount\030\001 \001(\004\022"
      "#\n\004rect\030\002 \001(\0132\025.pbmldrtree.Rectangle\0222\n\010"
      "segments\030\003 \003(\0132 .pbmldrtree.EdgeBasedNod"
      "eSegment\",\n\005RTree\022#\n\004node\030\001 \003(\0132\025.pbmldr"
      "tree.RTreeNode"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 454);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rtree.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_rtree_2eproto
namespace pbmldrtree {

// ===================================================================

void EdgeBasedNodeSegment::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgeBasedNodeSegment::kUFieldNumber;
const int EdgeBasedNodeSegment::kVFieldNumber;
const int EdgeBasedNodeSegment::kForwardSegmentIdFieldNumber;
const int EdgeBasedNodeSegment::kReverseSegmentIdFieldNumber;
const int EdgeBasedNodeSegment::kFwdSegmentPositionFieldNumber;
const int EdgeBasedNodeSegment::kForwardEnabledFieldNumber;
const int EdgeBasedNodeSegment::kReverseEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgeBasedNodeSegment::EdgeBasedNodeSegment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_rtree_2eproto::InitDefaultsEdgeBasedNodeSegment();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbmldrtree.EdgeBasedNodeSegment)
}
EdgeBasedNodeSegment::EdgeBasedNodeSegment(const EdgeBasedNodeSegment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&u_, &from.u_,
    static_cast<size_t>(reinterpret_cast<char*>(&reverseenabled_) -
    reinterpret_cast<char*>(&u_)) + sizeof(reverseenabled_));
  // @@protoc_insertion_point(copy_constructor:pbmldrtree.EdgeBasedNodeSegment)
}

void EdgeBasedNodeSegment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reverseenabled_) -
      reinterpret_cast<char*>(&u_)) + sizeof(reverseenabled_));
}

EdgeBasedNodeSegment::~EdgeBasedNodeSegment() {
  // @@protoc_insertion_point(destructor:pbmldrtree.EdgeBasedNodeSegment)
  SharedDtor();
}

void EdgeBasedNodeSegment::SharedDtor() {
}

void EdgeBasedNodeSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeBasedNodeSegment::descriptor() {
  ::protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EdgeBasedNodeSegment& EdgeBasedNodeSegment::default_instance() {
  ::protobuf_rtree_2eproto::InitDefaultsEdgeBasedNodeSegment();
  return *internal_default_instance();
}

EdgeBasedNodeSegment* EdgeBasedNodeSegment::New(::google::protobuf::Arena* arena) const {
  EdgeBasedNodeSegment* n = new EdgeBasedNodeSegment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EdgeBasedNodeSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:pbmldrtree.EdgeBasedNodeSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&u_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reverseenabled_) -
        reinterpret_cast<char*>(&u_)) + sizeof(reverseenabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EdgeBasedNodeSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbmldrtree.EdgeBasedNodeSegment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 u = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_u();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 v = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 forward_segment_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_forward_segment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forward_segment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reverse_segment_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reverse_segment_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reverse_segment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fwd_segment_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_fwd_segment_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fwd_segment_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 forwardEnabled = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_forwardenabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forwardenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reverseEnabled = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_reverseenabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reverseenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbmldrtree.EdgeBasedNodeSegment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbmldrtree.EdgeBasedNodeSegment)
  return false;
#undef DO_
}

void EdgeBasedNodeSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbmldrtree.EdgeBasedNodeSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 u = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->u(), output);
  }

  // optional uint32 v = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->v(), output);
  }

  // optional uint32 forward_segment_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->forward_segment_id(), output);
  }

  // optional uint32 reverse_segment_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reverse_segment_id(), output);
  }

  // optional uint32 fwd_segment_position = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fwd_segment_position(), output);
  }

  // optional uint32 forwardEnabled = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->forwardenabled(), output);
  }

  // optional uint32 reverseEnabled = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reverseenabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbmldrtree.EdgeBasedNodeSegment)
}

::google::protobuf::uint8* EdgeBasedNodeSegment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbmldrtree.EdgeBasedNodeSegment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 u = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->u(), target);
  }

  // optional uint32 v = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->v(), target);
  }

  // optional uint32 forward_segment_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->forward_segment_id(), target);
  }

  // optional uint32 reverse_segment_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reverse_segment_id(), target);
  }

  // optional uint32 fwd_segment_position = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fwd_segment_position(), target);
  }

  // optional uint32 forwardEnabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->forwardenabled(), target);
  }

  // optional uint32 reverseEnabled = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reverseenabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbmldrtree.EdgeBasedNodeSegment)
  return target;
}

size_t EdgeBasedNodeSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbmldrtree.EdgeBasedNodeSegment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 u = 1;
    if (has_u()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->u());
    }

    // optional uint32 v = 2;
    if (has_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->v());
    }

    // optional uint32 forward_segment_id = 3;
    if (has_forward_segment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forward_segment_id());
    }

    // optional uint32 reverse_segment_id = 4;
    if (has_reverse_segment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reverse_segment_id());
    }

    // optional uint32 fwd_segment_position = 5;
    if (has_fwd_segment_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fwd_segment_position());
    }

    // optional uint32 forwardEnabled = 6;
    if (has_forwardenabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forwardenabled());
    }

    // optional uint32 reverseEnabled = 7;
    if (has_reverseenabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reverseenabled());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeBasedNodeSegment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbmldrtree.EdgeBasedNodeSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeBasedNodeSegment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgeBasedNodeSegment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbmldrtree.EdgeBasedNodeSegment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbmldrtree.EdgeBasedNodeSegment)
    MergeFrom(*source);
  }
}

void EdgeBasedNodeSegment::MergeFrom(const EdgeBasedNodeSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbmldrtree.EdgeBasedNodeSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      u_ = from.u_;
    }
    if (cached_has_bits & 0x00000002u) {
      v_ = from.v_;
    }
    if (cached_has_bits & 0x00000004u) {
      forward_segment_id_ = from.forward_segment_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      reverse_segment_id_ = from.reverse_segment_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      fwd_segment_position_ = from.fwd_segment_position_;
    }
    if (cached_has_bits & 0x00000020u) {
      forwardenabled_ = from.forwardenabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      reverseenabled_ = from.reverseenabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EdgeBasedNodeSegment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbmldrtree.EdgeBasedNodeSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeBasedNodeSegment::CopyFrom(const EdgeBasedNodeSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbmldrtree.EdgeBasedNodeSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeBasedNodeSegment::IsInitialized() const {
  return true;
}

void EdgeBasedNodeSegment::Swap(EdgeBasedNodeSegment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgeBasedNodeSegment::InternalSwap(EdgeBasedNodeSegment* other) {
  using std::swap;
  swap(u_, other->u_);
  swap(v_, other->v_);
  swap(forward_segment_id_, other->forward_segment_id_);
  swap(reverse_segment_id_, other->reverse_segment_id_);
  swap(fwd_segment_position_, other->fwd_segment_position_);
  swap(forwardenabled_, other->forwardenabled_);
  swap(reverseenabled_, other->reverseenabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgeBasedNodeSegment::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rectangle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rectangle::kMinLatFieldNumber;
const int Rectangle::kMinLonFieldNumber;
const int Rectangle::kMaxLatFieldNumber;
const int Rectangle::kMaxLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rectangle::Rectangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_rtree_2eproto::InitDefaultsRectangle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbmldrtree.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_lat_, &from.min_lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_lon_) -
    reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
  // @@protoc_insertion_point(copy_constructor:pbmldrtree.Rectangle)
}

void Rectangle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_lon_) -
      reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:pbmldrtree.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
}

void Rectangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rectangle::descriptor() {
  ::protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rectangle& Rectangle::default_instance() {
  ::protobuf_rtree_2eproto::InitDefaultsRectangle();
  return *internal_default_instance();
}

Rectangle* Rectangle::New(::google::protobuf::Arena* arena) const {
  Rectangle* n = new Rectangle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:pbmldrtree.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&min_lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_lon_) -
        reinterpret_cast<char*>(&min_lat_)) + sizeof(max_lon_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbmldrtree.Rectangle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 min_lat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_min_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &min_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 min_lon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &min_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 max_lat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &max_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint64 max_lon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &max_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbmldrtree.Rectangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbmldrtree.Rectangle)
  return false;
#undef DO_
}

void Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbmldrtree.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 min_lat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->min_lat(), output);
  }

  // optional sint64 min_lon = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(2, this->min_lon(), output);
  }

  // optional sint64 max_lat = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(3, this->max_lat(), output);
  }

  // optional sint64 max_lon = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->max_lon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbmldrtree.Rectangle)
}

::google::protobuf::uint8* Rectangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbmldrtree.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint64 min_lat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->min_lat(), target);
  }

  // optional sint64 min_lon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(2, this->min_lon(), target);
  }

  // optional sint64 max_lat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(3, this->max_lat(), target);
  }

  // optional sint64 max_lon = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->max_lon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbmldrtree.Rectangle)
  return target;
}

size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbmldrtree.Rectangle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional sint64 min_lat = 1;
    if (has_min_lat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->min_lat());
    }

    // optional sint64 min_lon = 2;
    if (has_min_lon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->min_lon());
    }

    // optional sint64 max_lat = 3;
    if (has_max_lat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->max_lat());
    }

    // optional sint64 max_lon = 4;
    if (has_max_lon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->max_lon());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rectangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbmldrtree.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rectangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbmldrtree.Rectangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbmldrtree.Rectangle)
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbmldrtree.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      min_lat_ = from.min_lat_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_lon_ = from.min_lon_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_lat_ = from.max_lat_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_lon_ = from.max_lon_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rectangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbmldrtree.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbmldrtree.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  return true;
}

void Rectangle::Swap(Rectangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  swap(min_lat_, other->min_lat_);
  swap(min_lon_, other->min_lon_);
  swap(max_lat_, other->max_lat_);
  swap(max_lon_, other->max_lon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rectangle::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RTreeNode::InitAsDefaultInstance() {
  ::pbmldrtree::_RTreeNode_default_instance_._instance.get_mutable()->rect_ = const_cast< ::pbmldrtree::Rectangle*>(
      ::pbmldrtree::Rectangle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RTreeNode::kItemCountFieldNumber;
const int RTreeNode::kRectFieldNumber;
const int RTreeNode::kSegmentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RTreeNode::RTreeNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_rtree_2eproto::InitDefaultsRTreeNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbmldrtree.RTreeNode)
}
RTreeNode::RTreeNode(const RTreeNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      segments_(from.segments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rect()) {
    rect_ = new ::pbmldrtree::Rectangle(*from.rect_);
  } else {
    rect_ = NULL;
  }
  itemcount_ = from.itemcount_;
  // @@protoc_insertion_point(copy_constructor:pbmldrtree.RTreeNode)
}

void RTreeNode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&itemcount_) -
      reinterpret_cast<char*>(&rect_)) + sizeof(itemcount_));
}

RTreeNode::~RTreeNode() {
  // @@protoc_insertion_point(destructor:pbmldrtree.RTreeNode)
  SharedDtor();
}

void RTreeNode::SharedDtor() {
  if (this != internal_default_instance()) delete rect_;
}

void RTreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTreeNode::descriptor() {
  ::protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RTreeNode& RTreeNode::default_instance() {
  ::protobuf_rtree_2eproto::InitDefaultsRTreeNode();
  return *internal_default_instance();
}

RTreeNode* RTreeNode::New(::google::protobuf::Arena* arena) const {
  RTreeNode* n = new RTreeNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RTreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:pbmldrtree.RTreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rect_ != NULL);
    rect_->Clear();
  }
  itemcount_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RTreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbmldrtree.RTreeNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_itemcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .pbmldrtree.Rectangle rect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pbmldrtree.EdgeBasedNodeSegment segments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_segments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbmldrtree.RTreeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbmldrtree.RTreeNode)
  return false;
#undef DO_
}

void RTreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbmldrtree.RTreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 itemCount = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemcount(), output);
  }

  // optional .pbmldrtree.Rectangle rect = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rect_, output);
  }

  // repeated .pbmldrtree.EdgeBasedNodeSegment segments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->segments(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbmldrtree.RTreeNode)
}

::google::protobuf::uint8* RTreeNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbmldrtree.RTreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 itemCount = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemcount(), target);
  }

  // optional .pbmldrtree.Rectangle rect = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->rect_, deterministic, target);
  }

  // repeated .pbmldrtree.EdgeBasedNodeSegment segments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->segments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->segments(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbmldrtree.RTreeNode)
  return target;
}

size_t RTreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbmldrtree.RTreeNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .pbmldrtree.EdgeBasedNodeSegment segments = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->segments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->segments(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .pbmldrtree.Rectangle rect = 2;
    if (has_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->rect_);
    }

    // optional uint64 itemCount = 1;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTreeNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbmldrtree.RTreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const RTreeNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RTreeNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbmldrtree.RTreeNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbmldrtree.RTreeNode)
    MergeFrom(*source);
  }
}

void RTreeNode::MergeFrom(const RTreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbmldrtree.RTreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  segments_.MergeFrom(from.segments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_rect()->::pbmldrtree::Rectangle::MergeFrom(from.rect());
    }
    if (cached_has_bits & 0x00000002u) {
      itemcount_ = from.itemcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RTreeNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbmldrtree.RTreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTreeNode::CopyFrom(const RTreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbmldrtree.RTreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeNode::IsInitialized() const {
  return true;
}

void RTreeNode::Swap(RTreeNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RTreeNode::InternalSwap(RTreeNode* other) {
  using std::swap;
  segments_.InternalSwap(&other->segments_);
  swap(rect_, other->rect_);
  swap(itemcount_, other->itemcount_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RTreeNode::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RTree::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RTree::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RTree::RTree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_rtree_2eproto::InitDefaultsRTree();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbmldrtree.RTree)
}
RTree::RTree(const RTree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      node_(from.node_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbmldrtree.RTree)
}

void RTree::SharedCtor() {
  _cached_size_ = 0;
}

RTree::~RTree() {
  // @@protoc_insertion_point(destructor:pbmldrtree.RTree)
  SharedDtor();
}

void RTree::SharedDtor() {
}

void RTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTree::descriptor() {
  ::protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RTree& RTree::default_instance() {
  ::protobuf_rtree_2eproto::InitDefaultsRTree();
  return *internal_default_instance();
}

RTree* RTree::New(::google::protobuf::Arena* arena) const {
  RTree* n = new RTree;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RTree::Clear() {
// @@protoc_insertion_point(message_clear_start:pbmldrtree.RTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbmldrtree.RTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbmldrtree.RTreeNode node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbmldrtree.RTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbmldrtree.RTree)
  return false;
#undef DO_
}

void RTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbmldrtree.RTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbmldrtree.RTreeNode node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pbmldrtree.RTree)
}

::google::protobuf::uint8* RTree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbmldrtree.RTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pbmldrtree.RTreeNode node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pbmldrtree.RTree)
  return target;
}

size_t RTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbmldrtree.RTree)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .pbmldrtree.RTreeNode node = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbmldrtree.RTree)
  GOOGLE_DCHECK_NE(&from, this);
  const RTree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RTree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbmldrtree.RTree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbmldrtree.RTree)
    MergeFrom(*source);
  }
}

void RTree::MergeFrom(const RTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbmldrtree.RTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
}

void RTree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbmldrtree.RTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTree::CopyFrom(const RTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbmldrtree.RTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTree::IsInitialized() const {
  return true;
}

void RTree::Swap(RTree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RTree::InternalSwap(RTree* other) {
  using std::swap;
  node_.InternalSwap(&other->node_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RTree::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_rtree_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pbmldrtree

// @@protoc_insertion_point(global_scope)
