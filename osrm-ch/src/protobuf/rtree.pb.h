// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtree.proto

#ifndef PROTOBUF_rtree_2eproto__INCLUDED
#define PROTOBUF_rtree_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "edge-based-graph.pb.h"
// @@protoc_insertion_point(includes)
namespace pbebg {
class EdgeBasedEdge;
class EdgeBasedEdgeDefaultTypeInternal;
extern EdgeBasedEdgeDefaultTypeInternal _EdgeBasedEdge_default_instance_;
class EdgeBasedGraph;
class EdgeBasedGraphDefaultTypeInternal;
extern EdgeBasedGraphDefaultTypeInternal _EdgeBasedGraph_default_instance_;
class EdgeBasedNode;
class EdgeBasedNodeDefaultTypeInternal;
extern EdgeBasedNodeDefaultTypeInternal _EdgeBasedNode_default_instance_;
class EdgeBasedNodeList;
class EdgeBasedNodeListDefaultTypeInternal;
extern EdgeBasedNodeListDefaultTypeInternal _EdgeBasedNodeList_default_instance_;
class OriginalEdgeData;
class OriginalEdgeDataDefaultTypeInternal;
extern OriginalEdgeDataDefaultTypeInternal _OriginalEdgeData_default_instance_;
class OriginalEdges;
class OriginalEdgesDefaultTypeInternal;
extern OriginalEdgesDefaultTypeInternal _OriginalEdges_default_instance_;
}  // namespace pbebg
namespace pbrtree {
class LeafNode;
class LeafNodeDefaultTypeInternal;
extern LeafNodeDefaultTypeInternal _LeafNode_default_instance_;
class Leaves;
class LeavesDefaultTypeInternal;
extern LeavesDefaultTypeInternal _Leaves_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
}  // namespace pbrtree

namespace pbrtree {

namespace protobuf_rtree_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_rtree_2eproto

// ===================================================================

class Rectangle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbrtree.Rectangle) */ {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rectangle& default_instance();

  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }

  void Swap(Rectangle* other);

  // implements Message ----------------------------------------------

  inline Rectangle* New() const PROTOBUF_FINAL { return New(NULL); }

  Rectangle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rectangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 min_lat = 1;
  void clear_min_lat();
  static const int kMinLatFieldNumber = 1;
  ::google::protobuf::uint64 min_lat() const;
  void set_min_lat(::google::protobuf::uint64 value);

  // uint64 min_lon = 2;
  void clear_min_lon();
  static const int kMinLonFieldNumber = 2;
  ::google::protobuf::uint64 min_lon() const;
  void set_min_lon(::google::protobuf::uint64 value);

  // uint64 max_lat = 3;
  void clear_max_lat();
  static const int kMaxLatFieldNumber = 3;
  ::google::protobuf::uint64 max_lat() const;
  void set_max_lat(::google::protobuf::uint64 value);

  // uint64 max_lon = 4;
  void clear_max_lon();
  static const int kMaxLonFieldNumber = 4;
  ::google::protobuf::uint64 max_lon() const;
  void set_max_lon(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pbrtree.Rectangle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 min_lat_;
  ::google::protobuf::uint64 min_lon_;
  ::google::protobuf::uint64 max_lat_;
  ::google::protobuf::uint64 max_lon_;
  mutable int _cached_size_;
  friend struct  protobuf_rtree_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LeafNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbrtree.LeafNode) */ {
 public:
  LeafNode();
  virtual ~LeafNode();

  LeafNode(const LeafNode& from);

  inline LeafNode& operator=(const LeafNode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeafNode& default_instance();

  static inline const LeafNode* internal_default_instance() {
    return reinterpret_cast<const LeafNode*>(
               &_LeafNode_default_instance_);
  }

  void Swap(LeafNode* other);

  // implements Message ----------------------------------------------

  inline LeafNode* New() const PROTOBUF_FINAL { return New(NULL); }

  LeafNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeafNode& from);
  void MergeFrom(const LeafNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeafNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbebg.EdgeBasedNode items = 3;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 3;
  const ::pbebg::EdgeBasedNode& items(int index) const;
  ::pbebg::EdgeBasedNode* mutable_items(int index);
  ::pbebg::EdgeBasedNode* add_items();
  ::google::protobuf::RepeatedPtrField< ::pbebg::EdgeBasedNode >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::pbebg::EdgeBasedNode >&
      items() const;

  // .pbrtree.Rectangle minimum_bounding_rectangle = 2;
  bool has_minimum_bounding_rectangle() const;
  void clear_minimum_bounding_rectangle();
  static const int kMinimumBoundingRectangleFieldNumber = 2;
  const ::pbrtree::Rectangle& minimum_bounding_rectangle() const;
  ::pbrtree::Rectangle* mutable_minimum_bounding_rectangle();
  ::pbrtree::Rectangle* release_minimum_bounding_rectangle();
  void set_allocated_minimum_bounding_rectangle(::pbrtree::Rectangle* minimum_bounding_rectangle);

  // uint64 itemCount = 1;
  void clear_itemcount();
  static const int kItemCountFieldNumber = 1;
  ::google::protobuf::uint64 itemcount() const;
  void set_itemcount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pbrtree.LeafNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pbebg::EdgeBasedNode > items_;
  ::pbrtree::Rectangle* minimum_bounding_rectangle_;
  ::google::protobuf::uint64 itemcount_;
  mutable int _cached_size_;
  friend struct  protobuf_rtree_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Leaves : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbrtree.Leaves) */ {
 public:
  Leaves();
  virtual ~Leaves();

  Leaves(const Leaves& from);

  inline Leaves& operator=(const Leaves& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Leaves& default_instance();

  static inline const Leaves* internal_default_instance() {
    return reinterpret_cast<const Leaves*>(
               &_Leaves_default_instance_);
  }

  void Swap(Leaves* other);

  // implements Message ----------------------------------------------

  inline Leaves* New() const PROTOBUF_FINAL { return New(NULL); }

  Leaves* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Leaves& from);
  void MergeFrom(const Leaves& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Leaves* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pbrtree.LeafNode items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  const ::pbrtree::LeafNode& items(int index) const;
  ::pbrtree::LeafNode* mutable_items(int index);
  ::pbrtree::LeafNode* add_items();
  ::google::protobuf::RepeatedPtrField< ::pbrtree::LeafNode >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::pbrtree::LeafNode >&
      items() const;

  // @@protoc_insertion_point(class_scope:pbrtree.Leaves)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pbrtree::LeafNode > items_;
  mutable int _cached_size_;
  friend struct  protobuf_rtree_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Rectangle

// uint64 min_lat = 1;
inline void Rectangle::clear_min_lat() {
  min_lat_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Rectangle::min_lat() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.min_lat)
  return min_lat_;
}
inline void Rectangle::set_min_lat(::google::protobuf::uint64 value) {
  
  min_lat_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.min_lat)
}

// uint64 min_lon = 2;
inline void Rectangle::clear_min_lon() {
  min_lon_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Rectangle::min_lon() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.min_lon)
  return min_lon_;
}
inline void Rectangle::set_min_lon(::google::protobuf::uint64 value) {
  
  min_lon_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.min_lon)
}

// uint64 max_lat = 3;
inline void Rectangle::clear_max_lat() {
  max_lat_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Rectangle::max_lat() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.max_lat)
  return max_lat_;
}
inline void Rectangle::set_max_lat(::google::protobuf::uint64 value) {
  
  max_lat_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.max_lat)
}

// uint64 max_lon = 4;
inline void Rectangle::clear_max_lon() {
  max_lon_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Rectangle::max_lon() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.max_lon)
  return max_lon_;
}
inline void Rectangle::set_max_lon(::google::protobuf::uint64 value) {
  
  max_lon_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.max_lon)
}

// -------------------------------------------------------------------

// LeafNode

// uint64 itemCount = 1;
inline void LeafNode::clear_itemcount() {
  itemcount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LeafNode::itemcount() const {
  // @@protoc_insertion_point(field_get:pbrtree.LeafNode.itemCount)
  return itemcount_;
}
inline void LeafNode::set_itemcount(::google::protobuf::uint64 value) {
  
  itemcount_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.LeafNode.itemCount)
}

// .pbrtree.Rectangle minimum_bounding_rectangle = 2;
inline bool LeafNode::has_minimum_bounding_rectangle() const {
  return this != internal_default_instance() && minimum_bounding_rectangle_ != NULL;
}
inline void LeafNode::clear_minimum_bounding_rectangle() {
  if (GetArenaNoVirtual() == NULL && minimum_bounding_rectangle_ != NULL) delete minimum_bounding_rectangle_;
  minimum_bounding_rectangle_ = NULL;
}
inline const ::pbrtree::Rectangle& LeafNode::minimum_bounding_rectangle() const {
  // @@protoc_insertion_point(field_get:pbrtree.LeafNode.minimum_bounding_rectangle)
  return minimum_bounding_rectangle_ != NULL ? *minimum_bounding_rectangle_
                         : *::pbrtree::Rectangle::internal_default_instance();
}
inline ::pbrtree::Rectangle* LeafNode::mutable_minimum_bounding_rectangle() {
  
  if (minimum_bounding_rectangle_ == NULL) {
    minimum_bounding_rectangle_ = new ::pbrtree::Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:pbrtree.LeafNode.minimum_bounding_rectangle)
  return minimum_bounding_rectangle_;
}
inline ::pbrtree::Rectangle* LeafNode::release_minimum_bounding_rectangle() {
  // @@protoc_insertion_point(field_release:pbrtree.LeafNode.minimum_bounding_rectangle)
  
  ::pbrtree::Rectangle* temp = minimum_bounding_rectangle_;
  minimum_bounding_rectangle_ = NULL;
  return temp;
}
inline void LeafNode::set_allocated_minimum_bounding_rectangle(::pbrtree::Rectangle* minimum_bounding_rectangle) {
  delete minimum_bounding_rectangle_;
  minimum_bounding_rectangle_ = minimum_bounding_rectangle;
  if (minimum_bounding_rectangle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pbrtree.LeafNode.minimum_bounding_rectangle)
}

// repeated .pbebg.EdgeBasedNode items = 3;
inline int LeafNode::items_size() const {
  return items_.size();
}
inline void LeafNode::clear_items() {
  items_.Clear();
}
inline const ::pbebg::EdgeBasedNode& LeafNode::items(int index) const {
  // @@protoc_insertion_point(field_get:pbrtree.LeafNode.items)
  return items_.Get(index);
}
inline ::pbebg::EdgeBasedNode* LeafNode::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbrtree.LeafNode.items)
  return items_.Mutable(index);
}
inline ::pbebg::EdgeBasedNode* LeafNode::add_items() {
  // @@protoc_insertion_point(field_add:pbrtree.LeafNode.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbebg::EdgeBasedNode >*
LeafNode::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pbrtree.LeafNode.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbebg::EdgeBasedNode >&
LeafNode::items() const {
  // @@protoc_insertion_point(field_list:pbrtree.LeafNode.items)
  return items_;
}

// -------------------------------------------------------------------

// Leaves

// repeated .pbrtree.LeafNode items = 1;
inline int Leaves::items_size() const {
  return items_.size();
}
inline void Leaves::clear_items() {
  items_.Clear();
}
inline const ::pbrtree::LeafNode& Leaves::items(int index) const {
  // @@protoc_insertion_point(field_get:pbrtree.Leaves.items)
  return items_.Get(index);
}
inline ::pbrtree::LeafNode* Leaves::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbrtree.Leaves.items)
  return items_.Mutable(index);
}
inline ::pbrtree::LeafNode* Leaves::add_items() {
  // @@protoc_insertion_point(field_add:pbrtree.Leaves.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbrtree::LeafNode >*
Leaves::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pbrtree.Leaves.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbrtree::LeafNode >&
Leaves::items() const {
  // @@protoc_insertion_point(field_list:pbrtree.Leaves.items)
  return items_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pbrtree

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rtree_2eproto__INCLUDED
