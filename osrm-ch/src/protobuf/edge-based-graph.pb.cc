// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: edge-based-graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "edge-based-graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbebg {
class EdgeBasedNodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EdgeBasedNode> {
} _EdgeBasedNode_default_instance_;
class EdgeBasedNodeListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EdgeBasedNodeList> {
} _EdgeBasedNodeList_default_instance_;
class EdgeBasedEdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EdgeBasedEdge> {
} _EdgeBasedEdge_default_instance_;
class EdgeBasedGraphDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EdgeBasedGraph> {
} _EdgeBasedGraph_default_instance_;
class OriginalEdgeDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OriginalEdgeData> {
} _OriginalEdgeData_default_instance_;
class OriginalEdgesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OriginalEdges> {
} _OriginalEdges_default_instance_;

namespace protobuf_edge_2dbased_2dgraph_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, forward_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, reverse_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, forward_segment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, reverse_segment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, name_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, forward_packed_geometry_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, reverse_packed_geometry_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, fwd_segment_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, component_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNode, is_tiny_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNodeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedNodeList, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedEdge, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedEdge, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedEdge, edge_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedEdge, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedEdge, forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedEdge, backward_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedGraph, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBasedGraph, edges_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalEdgeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalEdgeData, via_node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalEdgeData, name_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalEdgeData, travel_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalEdgeData, lane_data_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalEdgeData, turn_instruction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalEdges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalEdges, edges_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(EdgeBasedNode)},
  { 16, -1, sizeof(EdgeBasedNodeList)},
  { 21, -1, sizeof(EdgeBasedEdge)},
  { 31, -1, sizeof(EdgeBasedGraph)},
  { 37, -1, sizeof(OriginalEdgeData)},
  { 46, -1, sizeof(OriginalEdges)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EdgeBasedNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EdgeBasedNodeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EdgeBasedEdge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EdgeBasedGraph_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OriginalEdgeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OriginalEdges_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "edge-based-graph.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _EdgeBasedNode_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EdgeBasedNodeList_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _EdgeBasedEdge_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _EdgeBasedGraph_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _OriginalEdgeData_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _OriginalEdges_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _EdgeBasedNode_default_instance_.DefaultConstruct();
  _EdgeBasedNodeList_default_instance_.DefaultConstruct();
  _EdgeBasedEdge_default_instance_.DefaultConstruct();
  _EdgeBasedGraph_default_instance_.DefaultConstruct();
  _OriginalEdgeData_default_instance_.DefaultConstruct();
  _OriginalEdges_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026edge-based-graph.proto\022\005pbebg\"\255\002\n\rEdge"
      "BasedNode\022\t\n\001u\030\001 \001(\004\022\t\n\001v\030\002 \001(\004\022\027\n\017forwa"
      "rd_enabled\030\003 \001(\010\022\027\n\017reverse_enabled\030\004 \001("
      "\010\022\032\n\022forward_segment_id\030\005 \001(\004\022\032\n\022reverse"
      "_segment_id\030\006 \001(\004\022\017\n\007name_id\030\007 \001(\004\022\"\n\032fo"
      "rward_packed_geometry_id\030\010 \001(\004\022\"\n\032revers"
      "e_packed_geometry_id\030\t \001(\004\022\034\n\024fwd_segmen"
      "t_position\030\n \001(\004\022\024\n\014component_id\030\013 \001(\004\022\017"
      "\n\007is_tiny\030\014 \001(\010\"8\n\021EdgeBasedNodeList\022#\n\005"
      "nodes\030\001 \003(\0132\024.pbebg.EdgeBasedNode\"s\n\rEdg"
      "eBasedEdge\022\016\n\006source\030\001 \001(\003\022\016\n\006target\030\002 \001"
      "(\003\022\017\n\007edge_id\030\003 \001(\003\022\016\n\006weight\030\004 \001(\003\022\017\n\007f"
      "orward\030\005 \001(\010\022\020\n\010backward\030\006 \001(\010\"D\n\016EdgeBa"
      "sedGraph\022\r\n\005count\030\001 \001(\004\022#\n\005edges\030\002 \003(\0132\024"
      ".pbebg.EdgeBasedEdge\"z\n\020OriginalEdgeData"
      "\022\020\n\010via_node\030\001 \001(\r\022\017\n\007name_id\030\002 \001(\r\022\023\n\013t"
      "ravel_mode\030\003 \001(\r\022\024\n\014lane_data_id\030\004 \001(\r\022\030"
      "\n\020turn_instruction\030\005 \001(\r\"7\n\rOriginalEdge"
      "s\022&\n\005edges\030\001 \003(\0132\027.pbebg.OriginalEdgeDat"
      "ab\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 769);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "edge-based-graph.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_edge_2dbased_2dgraph_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgeBasedNode::kUFieldNumber;
const int EdgeBasedNode::kVFieldNumber;
const int EdgeBasedNode::kForwardEnabledFieldNumber;
const int EdgeBasedNode::kReverseEnabledFieldNumber;
const int EdgeBasedNode::kForwardSegmentIdFieldNumber;
const int EdgeBasedNode::kReverseSegmentIdFieldNumber;
const int EdgeBasedNode::kNameIdFieldNumber;
const int EdgeBasedNode::kForwardPackedGeometryIdFieldNumber;
const int EdgeBasedNode::kReversePackedGeometryIdFieldNumber;
const int EdgeBasedNode::kFwdSegmentPositionFieldNumber;
const int EdgeBasedNode::kComponentIdFieldNumber;
const int EdgeBasedNode::kIsTinyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgeBasedNode::EdgeBasedNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbebg.EdgeBasedNode)
}
EdgeBasedNode::EdgeBasedNode(const EdgeBasedNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&u_, &from.u_,
    reinterpret_cast<char*>(&is_tiny_) -
    reinterpret_cast<char*>(&u_) + sizeof(is_tiny_));
  // @@protoc_insertion_point(copy_constructor:pbebg.EdgeBasedNode)
}

void EdgeBasedNode::SharedCtor() {
  ::memset(&u_, 0, reinterpret_cast<char*>(&is_tiny_) -
    reinterpret_cast<char*>(&u_) + sizeof(is_tiny_));
  _cached_size_ = 0;
}

EdgeBasedNode::~EdgeBasedNode() {
  // @@protoc_insertion_point(destructor:pbebg.EdgeBasedNode)
  SharedDtor();
}

void EdgeBasedNode::SharedDtor() {
}

void EdgeBasedNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeBasedNode::descriptor() {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[0].descriptor;
}

const EdgeBasedNode& EdgeBasedNode::default_instance() {
  protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

EdgeBasedNode* EdgeBasedNode::New(::google::protobuf::Arena* arena) const {
  EdgeBasedNode* n = new EdgeBasedNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EdgeBasedNode::Clear() {
// @@protoc_insertion_point(message_clear_start:pbebg.EdgeBasedNode)
  ::memset(&u_, 0, reinterpret_cast<char*>(&is_tiny_) -
    reinterpret_cast<char*>(&u_) + sizeof(is_tiny_));
}

bool EdgeBasedNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbebg.EdgeBasedNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 u = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 v = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool forward_enabled = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool reverse_enabled = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reverse_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 forward_segment_id = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &forward_segment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 reverse_segment_id = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reverse_segment_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 name_id = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &name_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 forward_packed_geometry_id = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &forward_packed_geometry_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 reverse_packed_geometry_id = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reverse_packed_geometry_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 fwd_segment_position = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fwd_segment_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 component_id = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &component_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_tiny = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tiny_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbebg.EdgeBasedNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbebg.EdgeBasedNode)
  return false;
#undef DO_
}

void EdgeBasedNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbebg.EdgeBasedNode)
  // uint64 u = 1;
  if (this->u() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->u(), output);
  }

  // uint64 v = 2;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->v(), output);
  }

  // bool forward_enabled = 3;
  if (this->forward_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->forward_enabled(), output);
  }

  // bool reverse_enabled = 4;
  if (this->reverse_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reverse_enabled(), output);
  }

  // uint64 forward_segment_id = 5;
  if (this->forward_segment_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->forward_segment_id(), output);
  }

  // uint64 reverse_segment_id = 6;
  if (this->reverse_segment_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->reverse_segment_id(), output);
  }

  // uint64 name_id = 7;
  if (this->name_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->name_id(), output);
  }

  // uint64 forward_packed_geometry_id = 8;
  if (this->forward_packed_geometry_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->forward_packed_geometry_id(), output);
  }

  // uint64 reverse_packed_geometry_id = 9;
  if (this->reverse_packed_geometry_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->reverse_packed_geometry_id(), output);
  }

  // uint64 fwd_segment_position = 10;
  if (this->fwd_segment_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->fwd_segment_position(), output);
  }

  // uint64 component_id = 11;
  if (this->component_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->component_id(), output);
  }

  // bool is_tiny = 12;
  if (this->is_tiny() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_tiny(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbebg.EdgeBasedNode)
}

::google::protobuf::uint8* EdgeBasedNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbebg.EdgeBasedNode)
  // uint64 u = 1;
  if (this->u() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->u(), target);
  }

  // uint64 v = 2;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->v(), target);
  }

  // bool forward_enabled = 3;
  if (this->forward_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->forward_enabled(), target);
  }

  // bool reverse_enabled = 4;
  if (this->reverse_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reverse_enabled(), target);
  }

  // uint64 forward_segment_id = 5;
  if (this->forward_segment_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->forward_segment_id(), target);
  }

  // uint64 reverse_segment_id = 6;
  if (this->reverse_segment_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->reverse_segment_id(), target);
  }

  // uint64 name_id = 7;
  if (this->name_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->name_id(), target);
  }

  // uint64 forward_packed_geometry_id = 8;
  if (this->forward_packed_geometry_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->forward_packed_geometry_id(), target);
  }

  // uint64 reverse_packed_geometry_id = 9;
  if (this->reverse_packed_geometry_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->reverse_packed_geometry_id(), target);
  }

  // uint64 fwd_segment_position = 10;
  if (this->fwd_segment_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->fwd_segment_position(), target);
  }

  // uint64 component_id = 11;
  if (this->component_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->component_id(), target);
  }

  // bool is_tiny = 12;
  if (this->is_tiny() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_tiny(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbebg.EdgeBasedNode)
  return target;
}

size_t EdgeBasedNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbebg.EdgeBasedNode)
  size_t total_size = 0;

  // uint64 u = 1;
  if (this->u() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->u());
  }

  // uint64 v = 2;
  if (this->v() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->v());
  }

  // uint64 forward_segment_id = 5;
  if (this->forward_segment_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->forward_segment_id());
  }

  // uint64 reverse_segment_id = 6;
  if (this->reverse_segment_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reverse_segment_id());
  }

  // uint64 name_id = 7;
  if (this->name_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->name_id());
  }

  // uint64 forward_packed_geometry_id = 8;
  if (this->forward_packed_geometry_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->forward_packed_geometry_id());
  }

  // uint64 reverse_packed_geometry_id = 9;
  if (this->reverse_packed_geometry_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->reverse_packed_geometry_id());
  }

  // uint64 fwd_segment_position = 10;
  if (this->fwd_segment_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->fwd_segment_position());
  }

  // uint64 component_id = 11;
  if (this->component_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->component_id());
  }

  // bool forward_enabled = 3;
  if (this->forward_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool reverse_enabled = 4;
  if (this->reverse_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_tiny = 12;
  if (this->is_tiny() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeBasedNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbebg.EdgeBasedNode)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeBasedNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgeBasedNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbebg.EdgeBasedNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbebg.EdgeBasedNode)
    MergeFrom(*source);
  }
}

void EdgeBasedNode::MergeFrom(const EdgeBasedNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbebg.EdgeBasedNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.u() != 0) {
    set_u(from.u());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.forward_segment_id() != 0) {
    set_forward_segment_id(from.forward_segment_id());
  }
  if (from.reverse_segment_id() != 0) {
    set_reverse_segment_id(from.reverse_segment_id());
  }
  if (from.name_id() != 0) {
    set_name_id(from.name_id());
  }
  if (from.forward_packed_geometry_id() != 0) {
    set_forward_packed_geometry_id(from.forward_packed_geometry_id());
  }
  if (from.reverse_packed_geometry_id() != 0) {
    set_reverse_packed_geometry_id(from.reverse_packed_geometry_id());
  }
  if (from.fwd_segment_position() != 0) {
    set_fwd_segment_position(from.fwd_segment_position());
  }
  if (from.component_id() != 0) {
    set_component_id(from.component_id());
  }
  if (from.forward_enabled() != 0) {
    set_forward_enabled(from.forward_enabled());
  }
  if (from.reverse_enabled() != 0) {
    set_reverse_enabled(from.reverse_enabled());
  }
  if (from.is_tiny() != 0) {
    set_is_tiny(from.is_tiny());
  }
}

void EdgeBasedNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbebg.EdgeBasedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeBasedNode::CopyFrom(const EdgeBasedNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbebg.EdgeBasedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeBasedNode::IsInitialized() const {
  return true;
}

void EdgeBasedNode::Swap(EdgeBasedNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgeBasedNode::InternalSwap(EdgeBasedNode* other) {
  std::swap(u_, other->u_);
  std::swap(v_, other->v_);
  std::swap(forward_segment_id_, other->forward_segment_id_);
  std::swap(reverse_segment_id_, other->reverse_segment_id_);
  std::swap(name_id_, other->name_id_);
  std::swap(forward_packed_geometry_id_, other->forward_packed_geometry_id_);
  std::swap(reverse_packed_geometry_id_, other->reverse_packed_geometry_id_);
  std::swap(fwd_segment_position_, other->fwd_segment_position_);
  std::swap(component_id_, other->component_id_);
  std::swap(forward_enabled_, other->forward_enabled_);
  std::swap(reverse_enabled_, other->reverse_enabled_);
  std::swap(is_tiny_, other->is_tiny_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgeBasedNode::GetMetadata() const {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EdgeBasedNode

// uint64 u = 1;
void EdgeBasedNode::clear_u() {
  u_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EdgeBasedNode::u() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.u)
  return u_;
}
void EdgeBasedNode::set_u(::google::protobuf::uint64 value) {
  
  u_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.u)
}

// uint64 v = 2;
void EdgeBasedNode::clear_v() {
  v_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EdgeBasedNode::v() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.v)
  return v_;
}
void EdgeBasedNode::set_v(::google::protobuf::uint64 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.v)
}

// bool forward_enabled = 3;
void EdgeBasedNode::clear_forward_enabled() {
  forward_enabled_ = false;
}
bool EdgeBasedNode::forward_enabled() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.forward_enabled)
  return forward_enabled_;
}
void EdgeBasedNode::set_forward_enabled(bool value) {
  
  forward_enabled_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.forward_enabled)
}

// bool reverse_enabled = 4;
void EdgeBasedNode::clear_reverse_enabled() {
  reverse_enabled_ = false;
}
bool EdgeBasedNode::reverse_enabled() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.reverse_enabled)
  return reverse_enabled_;
}
void EdgeBasedNode::set_reverse_enabled(bool value) {
  
  reverse_enabled_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.reverse_enabled)
}

// uint64 forward_segment_id = 5;
void EdgeBasedNode::clear_forward_segment_id() {
  forward_segment_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EdgeBasedNode::forward_segment_id() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.forward_segment_id)
  return forward_segment_id_;
}
void EdgeBasedNode::set_forward_segment_id(::google::protobuf::uint64 value) {
  
  forward_segment_id_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.forward_segment_id)
}

// uint64 reverse_segment_id = 6;
void EdgeBasedNode::clear_reverse_segment_id() {
  reverse_segment_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EdgeBasedNode::reverse_segment_id() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.reverse_segment_id)
  return reverse_segment_id_;
}
void EdgeBasedNode::set_reverse_segment_id(::google::protobuf::uint64 value) {
  
  reverse_segment_id_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.reverse_segment_id)
}

// uint64 name_id = 7;
void EdgeBasedNode::clear_name_id() {
  name_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EdgeBasedNode::name_id() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.name_id)
  return name_id_;
}
void EdgeBasedNode::set_name_id(::google::protobuf::uint64 value) {
  
  name_id_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.name_id)
}

// uint64 forward_packed_geometry_id = 8;
void EdgeBasedNode::clear_forward_packed_geometry_id() {
  forward_packed_geometry_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EdgeBasedNode::forward_packed_geometry_id() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.forward_packed_geometry_id)
  return forward_packed_geometry_id_;
}
void EdgeBasedNode::set_forward_packed_geometry_id(::google::protobuf::uint64 value) {
  
  forward_packed_geometry_id_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.forward_packed_geometry_id)
}

// uint64 reverse_packed_geometry_id = 9;
void EdgeBasedNode::clear_reverse_packed_geometry_id() {
  reverse_packed_geometry_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EdgeBasedNode::reverse_packed_geometry_id() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.reverse_packed_geometry_id)
  return reverse_packed_geometry_id_;
}
void EdgeBasedNode::set_reverse_packed_geometry_id(::google::protobuf::uint64 value) {
  
  reverse_packed_geometry_id_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.reverse_packed_geometry_id)
}

// uint64 fwd_segment_position = 10;
void EdgeBasedNode::clear_fwd_segment_position() {
  fwd_segment_position_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EdgeBasedNode::fwd_segment_position() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.fwd_segment_position)
  return fwd_segment_position_;
}
void EdgeBasedNode::set_fwd_segment_position(::google::protobuf::uint64 value) {
  
  fwd_segment_position_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.fwd_segment_position)
}

// uint64 component_id = 11;
void EdgeBasedNode::clear_component_id() {
  component_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EdgeBasedNode::component_id() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.component_id)
  return component_id_;
}
void EdgeBasedNode::set_component_id(::google::protobuf::uint64 value) {
  
  component_id_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.component_id)
}

// bool is_tiny = 12;
void EdgeBasedNode::clear_is_tiny() {
  is_tiny_ = false;
}
bool EdgeBasedNode::is_tiny() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNode.is_tiny)
  return is_tiny_;
}
void EdgeBasedNode::set_is_tiny(bool value) {
  
  is_tiny_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedNode.is_tiny)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgeBasedNodeList::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgeBasedNodeList::EdgeBasedNodeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbebg.EdgeBasedNodeList)
}
EdgeBasedNodeList::EdgeBasedNodeList(const EdgeBasedNodeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbebg.EdgeBasedNodeList)
}

void EdgeBasedNodeList::SharedCtor() {
  _cached_size_ = 0;
}

EdgeBasedNodeList::~EdgeBasedNodeList() {
  // @@protoc_insertion_point(destructor:pbebg.EdgeBasedNodeList)
  SharedDtor();
}

void EdgeBasedNodeList::SharedDtor() {
}

void EdgeBasedNodeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeBasedNodeList::descriptor() {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[1].descriptor;
}

const EdgeBasedNodeList& EdgeBasedNodeList::default_instance() {
  protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

EdgeBasedNodeList* EdgeBasedNodeList::New(::google::protobuf::Arena* arena) const {
  EdgeBasedNodeList* n = new EdgeBasedNodeList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EdgeBasedNodeList::Clear() {
// @@protoc_insertion_point(message_clear_start:pbebg.EdgeBasedNodeList)
  nodes_.Clear();
}

bool EdgeBasedNodeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbebg.EdgeBasedNodeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbebg.EdgeBasedNode nodes = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbebg.EdgeBasedNodeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbebg.EdgeBasedNodeList)
  return false;
#undef DO_
}

void EdgeBasedNodeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbebg.EdgeBasedNodeList)
  // repeated .pbebg.EdgeBasedNode nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbebg.EdgeBasedNodeList)
}

::google::protobuf::uint8* EdgeBasedNodeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbebg.EdgeBasedNodeList)
  // repeated .pbebg.EdgeBasedNode nodes = 1;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->nodes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbebg.EdgeBasedNodeList)
  return target;
}

size_t EdgeBasedNodeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbebg.EdgeBasedNodeList)
  size_t total_size = 0;

  // repeated .pbebg.EdgeBasedNode nodes = 1;
  {
    unsigned int count = this->nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeBasedNodeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbebg.EdgeBasedNodeList)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeBasedNodeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgeBasedNodeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbebg.EdgeBasedNodeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbebg.EdgeBasedNodeList)
    MergeFrom(*source);
  }
}

void EdgeBasedNodeList::MergeFrom(const EdgeBasedNodeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbebg.EdgeBasedNodeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodes_.MergeFrom(from.nodes_);
}

void EdgeBasedNodeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbebg.EdgeBasedNodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeBasedNodeList::CopyFrom(const EdgeBasedNodeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbebg.EdgeBasedNodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeBasedNodeList::IsInitialized() const {
  return true;
}

void EdgeBasedNodeList::Swap(EdgeBasedNodeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgeBasedNodeList::InternalSwap(EdgeBasedNodeList* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgeBasedNodeList::GetMetadata() const {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EdgeBasedNodeList

// repeated .pbebg.EdgeBasedNode nodes = 1;
int EdgeBasedNodeList::nodes_size() const {
  return nodes_.size();
}
void EdgeBasedNodeList::clear_nodes() {
  nodes_.Clear();
}
const ::pbebg::EdgeBasedNode& EdgeBasedNodeList::nodes(int index) const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedNodeList.nodes)
  return nodes_.Get(index);
}
::pbebg::EdgeBasedNode* EdgeBasedNodeList::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:pbebg.EdgeBasedNodeList.nodes)
  return nodes_.Mutable(index);
}
::pbebg::EdgeBasedNode* EdgeBasedNodeList::add_nodes() {
  // @@protoc_insertion_point(field_add:pbebg.EdgeBasedNodeList.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbebg::EdgeBasedNode >*
EdgeBasedNodeList::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:pbebg.EdgeBasedNodeList.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbebg::EdgeBasedNode >&
EdgeBasedNodeList::nodes() const {
  // @@protoc_insertion_point(field_list:pbebg.EdgeBasedNodeList.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgeBasedEdge::kSourceFieldNumber;
const int EdgeBasedEdge::kTargetFieldNumber;
const int EdgeBasedEdge::kEdgeIdFieldNumber;
const int EdgeBasedEdge::kWeightFieldNumber;
const int EdgeBasedEdge::kForwardFieldNumber;
const int EdgeBasedEdge::kBackwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgeBasedEdge::EdgeBasedEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbebg.EdgeBasedEdge)
}
EdgeBasedEdge::EdgeBasedEdge(const EdgeBasedEdge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    reinterpret_cast<char*>(&backward_) -
    reinterpret_cast<char*>(&source_) + sizeof(backward_));
  // @@protoc_insertion_point(copy_constructor:pbebg.EdgeBasedEdge)
}

void EdgeBasedEdge::SharedCtor() {
  ::memset(&source_, 0, reinterpret_cast<char*>(&backward_) -
    reinterpret_cast<char*>(&source_) + sizeof(backward_));
  _cached_size_ = 0;
}

EdgeBasedEdge::~EdgeBasedEdge() {
  // @@protoc_insertion_point(destructor:pbebg.EdgeBasedEdge)
  SharedDtor();
}

void EdgeBasedEdge::SharedDtor() {
}

void EdgeBasedEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeBasedEdge::descriptor() {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[2].descriptor;
}

const EdgeBasedEdge& EdgeBasedEdge::default_instance() {
  protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

EdgeBasedEdge* EdgeBasedEdge::New(::google::protobuf::Arena* arena) const {
  EdgeBasedEdge* n = new EdgeBasedEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EdgeBasedEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:pbebg.EdgeBasedEdge)
  ::memset(&source_, 0, reinterpret_cast<char*>(&backward_) -
    reinterpret_cast<char*>(&source_) + sizeof(backward_));
}

bool EdgeBasedEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbebg.EdgeBasedEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 source = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 edge_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &edge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 weight = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool forward = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool backward = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbebg.EdgeBasedEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbebg.EdgeBasedEdge)
  return false;
#undef DO_
}

void EdgeBasedEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbebg.EdgeBasedEdge)
  // int64 source = 1;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source(), output);
  }

  // int64 target = 2;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->target(), output);
  }

  // int64 edge_id = 3;
  if (this->edge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->edge_id(), output);
  }

  // int64 weight = 4;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->weight(), output);
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->forward(), output);
  }

  // bool backward = 6;
  if (this->backward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->backward(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbebg.EdgeBasedEdge)
}

::google::protobuf::uint8* EdgeBasedEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbebg.EdgeBasedEdge)
  // int64 source = 1;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source(), target);
  }

  // int64 target = 2;
  if (this->target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->target(), target);
  }

  // int64 edge_id = 3;
  if (this->edge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->edge_id(), target);
  }

  // int64 weight = 4;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->weight(), target);
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->forward(), target);
  }

  // bool backward = 6;
  if (this->backward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->backward(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbebg.EdgeBasedEdge)
  return target;
}

size_t EdgeBasedEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbebg.EdgeBasedEdge)
  size_t total_size = 0;

  // int64 source = 1;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source());
  }

  // int64 target = 2;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target());
  }

  // int64 edge_id = 3;
  if (this->edge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->edge_id());
  }

  // int64 weight = 4;
  if (this->weight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->weight());
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    total_size += 1 + 1;
  }

  // bool backward = 6;
  if (this->backward() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeBasedEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbebg.EdgeBasedEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeBasedEdge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgeBasedEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbebg.EdgeBasedEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbebg.EdgeBasedEdge)
    MergeFrom(*source);
  }
}

void EdgeBasedEdge::MergeFrom(const EdgeBasedEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbebg.EdgeBasedEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
  if (from.edge_id() != 0) {
    set_edge_id(from.edge_id());
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
  if (from.forward() != 0) {
    set_forward(from.forward());
  }
  if (from.backward() != 0) {
    set_backward(from.backward());
  }
}

void EdgeBasedEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbebg.EdgeBasedEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeBasedEdge::CopyFrom(const EdgeBasedEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbebg.EdgeBasedEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeBasedEdge::IsInitialized() const {
  return true;
}

void EdgeBasedEdge::Swap(EdgeBasedEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgeBasedEdge::InternalSwap(EdgeBasedEdge* other) {
  std::swap(source_, other->source_);
  std::swap(target_, other->target_);
  std::swap(edge_id_, other->edge_id_);
  std::swap(weight_, other->weight_);
  std::swap(forward_, other->forward_);
  std::swap(backward_, other->backward_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgeBasedEdge::GetMetadata() const {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EdgeBasedEdge

// int64 source = 1;
void EdgeBasedEdge::clear_source() {
  source_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 EdgeBasedEdge::source() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedEdge.source)
  return source_;
}
void EdgeBasedEdge::set_source(::google::protobuf::int64 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedEdge.source)
}

// int64 target = 2;
void EdgeBasedEdge::clear_target() {
  target_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 EdgeBasedEdge::target() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedEdge.target)
  return target_;
}
void EdgeBasedEdge::set_target(::google::protobuf::int64 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedEdge.target)
}

// int64 edge_id = 3;
void EdgeBasedEdge::clear_edge_id() {
  edge_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 EdgeBasedEdge::edge_id() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedEdge.edge_id)
  return edge_id_;
}
void EdgeBasedEdge::set_edge_id(::google::protobuf::int64 value) {
  
  edge_id_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedEdge.edge_id)
}

// int64 weight = 4;
void EdgeBasedEdge::clear_weight() {
  weight_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 EdgeBasedEdge::weight() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedEdge.weight)
  return weight_;
}
void EdgeBasedEdge::set_weight(::google::protobuf::int64 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedEdge.weight)
}

// bool forward = 5;
void EdgeBasedEdge::clear_forward() {
  forward_ = false;
}
bool EdgeBasedEdge::forward() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedEdge.forward)
  return forward_;
}
void EdgeBasedEdge::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedEdge.forward)
}

// bool backward = 6;
void EdgeBasedEdge::clear_backward() {
  backward_ = false;
}
bool EdgeBasedEdge::backward() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedEdge.backward)
  return backward_;
}
void EdgeBasedEdge::set_backward(bool value) {
  
  backward_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedEdge.backward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgeBasedGraph::kCountFieldNumber;
const int EdgeBasedGraph::kEdgesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgeBasedGraph::EdgeBasedGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbebg.EdgeBasedGraph)
}
EdgeBasedGraph::EdgeBasedGraph(const EdgeBasedGraph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      edges_(from.edges_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:pbebg.EdgeBasedGraph)
}

void EdgeBasedGraph::SharedCtor() {
  count_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

EdgeBasedGraph::~EdgeBasedGraph() {
  // @@protoc_insertion_point(destructor:pbebg.EdgeBasedGraph)
  SharedDtor();
}

void EdgeBasedGraph::SharedDtor() {
}

void EdgeBasedGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeBasedGraph::descriptor() {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[3].descriptor;
}

const EdgeBasedGraph& EdgeBasedGraph::default_instance() {
  protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

EdgeBasedGraph* EdgeBasedGraph::New(::google::protobuf::Arena* arena) const {
  EdgeBasedGraph* n = new EdgeBasedGraph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EdgeBasedGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:pbebg.EdgeBasedGraph)
  edges_.Clear();
  count_ = GOOGLE_ULONGLONG(0);
}

bool EdgeBasedGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbebg.EdgeBasedGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 count = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pbebg.EdgeBasedEdge edges = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbebg.EdgeBasedGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbebg.EdgeBasedGraph)
  return false;
#undef DO_
}

void EdgeBasedGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbebg.EdgeBasedGraph)
  // uint64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->count(), output);
  }

  // repeated .pbebg.EdgeBasedEdge edges = 2;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edges(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbebg.EdgeBasedGraph)
}

::google::protobuf::uint8* EdgeBasedGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbebg.EdgeBasedGraph)
  // uint64 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->count(), target);
  }

  // repeated .pbebg.EdgeBasedEdge edges = 2;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->edges(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbebg.EdgeBasedGraph)
  return target;
}

size_t EdgeBasedGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbebg.EdgeBasedGraph)
  size_t total_size = 0;

  // repeated .pbebg.EdgeBasedEdge edges = 2;
  {
    unsigned int count = this->edges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edges(i));
    }
  }

  // uint64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeBasedGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbebg.EdgeBasedGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeBasedGraph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgeBasedGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbebg.EdgeBasedGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbebg.EdgeBasedGraph)
    MergeFrom(*source);
  }
}

void EdgeBasedGraph::MergeFrom(const EdgeBasedGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbebg.EdgeBasedGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  edges_.MergeFrom(from.edges_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void EdgeBasedGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbebg.EdgeBasedGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeBasedGraph::CopyFrom(const EdgeBasedGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbebg.EdgeBasedGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeBasedGraph::IsInitialized() const {
  return true;
}

void EdgeBasedGraph::Swap(EdgeBasedGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgeBasedGraph::InternalSwap(EdgeBasedGraph* other) {
  edges_.UnsafeArenaSwap(&other->edges_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgeBasedGraph::GetMetadata() const {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EdgeBasedGraph

// uint64 count = 1;
void EdgeBasedGraph::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EdgeBasedGraph::count() const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedGraph.count)
  return count_;
}
void EdgeBasedGraph::set_count(::google::protobuf::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:pbebg.EdgeBasedGraph.count)
}

// repeated .pbebg.EdgeBasedEdge edges = 2;
int EdgeBasedGraph::edges_size() const {
  return edges_.size();
}
void EdgeBasedGraph::clear_edges() {
  edges_.Clear();
}
const ::pbebg::EdgeBasedEdge& EdgeBasedGraph::edges(int index) const {
  // @@protoc_insertion_point(field_get:pbebg.EdgeBasedGraph.edges)
  return edges_.Get(index);
}
::pbebg::EdgeBasedEdge* EdgeBasedGraph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:pbebg.EdgeBasedGraph.edges)
  return edges_.Mutable(index);
}
::pbebg::EdgeBasedEdge* EdgeBasedGraph::add_edges() {
  // @@protoc_insertion_point(field_add:pbebg.EdgeBasedGraph.edges)
  return edges_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbebg::EdgeBasedEdge >*
EdgeBasedGraph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:pbebg.EdgeBasedGraph.edges)
  return &edges_;
}
const ::google::protobuf::RepeatedPtrField< ::pbebg::EdgeBasedEdge >&
EdgeBasedGraph::edges() const {
  // @@protoc_insertion_point(field_list:pbebg.EdgeBasedGraph.edges)
  return edges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OriginalEdgeData::kViaNodeFieldNumber;
const int OriginalEdgeData::kNameIdFieldNumber;
const int OriginalEdgeData::kTravelModeFieldNumber;
const int OriginalEdgeData::kLaneDataIdFieldNumber;
const int OriginalEdgeData::kTurnInstructionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OriginalEdgeData::OriginalEdgeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbebg.OriginalEdgeData)
}
OriginalEdgeData::OriginalEdgeData(const OriginalEdgeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&via_node_, &from.via_node_,
    reinterpret_cast<char*>(&turn_instruction_) -
    reinterpret_cast<char*>(&via_node_) + sizeof(turn_instruction_));
  // @@protoc_insertion_point(copy_constructor:pbebg.OriginalEdgeData)
}

void OriginalEdgeData::SharedCtor() {
  ::memset(&via_node_, 0, reinterpret_cast<char*>(&turn_instruction_) -
    reinterpret_cast<char*>(&via_node_) + sizeof(turn_instruction_));
  _cached_size_ = 0;
}

OriginalEdgeData::~OriginalEdgeData() {
  // @@protoc_insertion_point(destructor:pbebg.OriginalEdgeData)
  SharedDtor();
}

void OriginalEdgeData::SharedDtor() {
}

void OriginalEdgeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OriginalEdgeData::descriptor() {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[4].descriptor;
}

const OriginalEdgeData& OriginalEdgeData::default_instance() {
  protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

OriginalEdgeData* OriginalEdgeData::New(::google::protobuf::Arena* arena) const {
  OriginalEdgeData* n = new OriginalEdgeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OriginalEdgeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pbebg.OriginalEdgeData)
  ::memset(&via_node_, 0, reinterpret_cast<char*>(&turn_instruction_) -
    reinterpret_cast<char*>(&via_node_) + sizeof(turn_instruction_));
}

bool OriginalEdgeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbebg.OriginalEdgeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 via_node = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &via_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 name_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 travel_mode = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &travel_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lane_data_id = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_data_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 turn_instruction = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_instruction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbebg.OriginalEdgeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbebg.OriginalEdgeData)
  return false;
#undef DO_
}

void OriginalEdgeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbebg.OriginalEdgeData)
  // uint32 via_node = 1;
  if (this->via_node() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->via_node(), output);
  }

  // uint32 name_id = 2;
  if (this->name_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->name_id(), output);
  }

  // uint32 travel_mode = 3;
  if (this->travel_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->travel_mode(), output);
  }

  // uint32 lane_data_id = 4;
  if (this->lane_data_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane_data_id(), output);
  }

  // uint32 turn_instruction = 5;
  if (this->turn_instruction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->turn_instruction(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbebg.OriginalEdgeData)
}

::google::protobuf::uint8* OriginalEdgeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbebg.OriginalEdgeData)
  // uint32 via_node = 1;
  if (this->via_node() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->via_node(), target);
  }

  // uint32 name_id = 2;
  if (this->name_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->name_id(), target);
  }

  // uint32 travel_mode = 3;
  if (this->travel_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->travel_mode(), target);
  }

  // uint32 lane_data_id = 4;
  if (this->lane_data_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane_data_id(), target);
  }

  // uint32 turn_instruction = 5;
  if (this->turn_instruction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->turn_instruction(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbebg.OriginalEdgeData)
  return target;
}

size_t OriginalEdgeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbebg.OriginalEdgeData)
  size_t total_size = 0;

  // uint32 via_node = 1;
  if (this->via_node() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->via_node());
  }

  // uint32 name_id = 2;
  if (this->name_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->name_id());
  }

  // uint32 travel_mode = 3;
  if (this->travel_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->travel_mode());
  }

  // uint32 lane_data_id = 4;
  if (this->lane_data_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lane_data_id());
  }

  // uint32 turn_instruction = 5;
  if (this->turn_instruction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turn_instruction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OriginalEdgeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbebg.OriginalEdgeData)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginalEdgeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OriginalEdgeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbebg.OriginalEdgeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbebg.OriginalEdgeData)
    MergeFrom(*source);
  }
}

void OriginalEdgeData::MergeFrom(const OriginalEdgeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbebg.OriginalEdgeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.via_node() != 0) {
    set_via_node(from.via_node());
  }
  if (from.name_id() != 0) {
    set_name_id(from.name_id());
  }
  if (from.travel_mode() != 0) {
    set_travel_mode(from.travel_mode());
  }
  if (from.lane_data_id() != 0) {
    set_lane_data_id(from.lane_data_id());
  }
  if (from.turn_instruction() != 0) {
    set_turn_instruction(from.turn_instruction());
  }
}

void OriginalEdgeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbebg.OriginalEdgeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginalEdgeData::CopyFrom(const OriginalEdgeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbebg.OriginalEdgeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginalEdgeData::IsInitialized() const {
  return true;
}

void OriginalEdgeData::Swap(OriginalEdgeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OriginalEdgeData::InternalSwap(OriginalEdgeData* other) {
  std::swap(via_node_, other->via_node_);
  std::swap(name_id_, other->name_id_);
  std::swap(travel_mode_, other->travel_mode_);
  std::swap(lane_data_id_, other->lane_data_id_);
  std::swap(turn_instruction_, other->turn_instruction_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OriginalEdgeData::GetMetadata() const {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OriginalEdgeData

// uint32 via_node = 1;
void OriginalEdgeData::clear_via_node() {
  via_node_ = 0u;
}
::google::protobuf::uint32 OriginalEdgeData::via_node() const {
  // @@protoc_insertion_point(field_get:pbebg.OriginalEdgeData.via_node)
  return via_node_;
}
void OriginalEdgeData::set_via_node(::google::protobuf::uint32 value) {
  
  via_node_ = value;
  // @@protoc_insertion_point(field_set:pbebg.OriginalEdgeData.via_node)
}

// uint32 name_id = 2;
void OriginalEdgeData::clear_name_id() {
  name_id_ = 0u;
}
::google::protobuf::uint32 OriginalEdgeData::name_id() const {
  // @@protoc_insertion_point(field_get:pbebg.OriginalEdgeData.name_id)
  return name_id_;
}
void OriginalEdgeData::set_name_id(::google::protobuf::uint32 value) {
  
  name_id_ = value;
  // @@protoc_insertion_point(field_set:pbebg.OriginalEdgeData.name_id)
}

// uint32 travel_mode = 3;
void OriginalEdgeData::clear_travel_mode() {
  travel_mode_ = 0u;
}
::google::protobuf::uint32 OriginalEdgeData::travel_mode() const {
  // @@protoc_insertion_point(field_get:pbebg.OriginalEdgeData.travel_mode)
  return travel_mode_;
}
void OriginalEdgeData::set_travel_mode(::google::protobuf::uint32 value) {
  
  travel_mode_ = value;
  // @@protoc_insertion_point(field_set:pbebg.OriginalEdgeData.travel_mode)
}

// uint32 lane_data_id = 4;
void OriginalEdgeData::clear_lane_data_id() {
  lane_data_id_ = 0u;
}
::google::protobuf::uint32 OriginalEdgeData::lane_data_id() const {
  // @@protoc_insertion_point(field_get:pbebg.OriginalEdgeData.lane_data_id)
  return lane_data_id_;
}
void OriginalEdgeData::set_lane_data_id(::google::protobuf::uint32 value) {
  
  lane_data_id_ = value;
  // @@protoc_insertion_point(field_set:pbebg.OriginalEdgeData.lane_data_id)
}

// uint32 turn_instruction = 5;
void OriginalEdgeData::clear_turn_instruction() {
  turn_instruction_ = 0u;
}
::google::protobuf::uint32 OriginalEdgeData::turn_instruction() const {
  // @@protoc_insertion_point(field_get:pbebg.OriginalEdgeData.turn_instruction)
  return turn_instruction_;
}
void OriginalEdgeData::set_turn_instruction(::google::protobuf::uint32 value) {
  
  turn_instruction_ = value;
  // @@protoc_insertion_point(field_set:pbebg.OriginalEdgeData.turn_instruction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OriginalEdges::kEdgesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OriginalEdges::OriginalEdges()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbebg.OriginalEdges)
}
OriginalEdges::OriginalEdges(const OriginalEdges& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      edges_(from.edges_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbebg.OriginalEdges)
}

void OriginalEdges::SharedCtor() {
  _cached_size_ = 0;
}

OriginalEdges::~OriginalEdges() {
  // @@protoc_insertion_point(destructor:pbebg.OriginalEdges)
  SharedDtor();
}

void OriginalEdges::SharedDtor() {
}

void OriginalEdges::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OriginalEdges::descriptor() {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[5].descriptor;
}

const OriginalEdges& OriginalEdges::default_instance() {
  protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

OriginalEdges* OriginalEdges::New(::google::protobuf::Arena* arena) const {
  OriginalEdges* n = new OriginalEdges;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OriginalEdges::Clear() {
// @@protoc_insertion_point(message_clear_start:pbebg.OriginalEdges)
  edges_.Clear();
}

bool OriginalEdges::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbebg.OriginalEdges)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbebg.OriginalEdgeData edges = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbebg.OriginalEdges)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbebg.OriginalEdges)
  return false;
#undef DO_
}

void OriginalEdges::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbebg.OriginalEdges)
  // repeated .pbebg.OriginalEdgeData edges = 1;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->edges(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbebg.OriginalEdges)
}

::google::protobuf::uint8* OriginalEdges::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbebg.OriginalEdges)
  // repeated .pbebg.OriginalEdgeData edges = 1;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->edges(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbebg.OriginalEdges)
  return target;
}

size_t OriginalEdges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbebg.OriginalEdges)
  size_t total_size = 0;

  // repeated .pbebg.OriginalEdgeData edges = 1;
  {
    unsigned int count = this->edges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edges(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OriginalEdges::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbebg.OriginalEdges)
  GOOGLE_DCHECK_NE(&from, this);
  const OriginalEdges* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OriginalEdges>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbebg.OriginalEdges)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbebg.OriginalEdges)
    MergeFrom(*source);
  }
}

void OriginalEdges::MergeFrom(const OriginalEdges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbebg.OriginalEdges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  edges_.MergeFrom(from.edges_);
}

void OriginalEdges::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbebg.OriginalEdges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginalEdges::CopyFrom(const OriginalEdges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbebg.OriginalEdges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginalEdges::IsInitialized() const {
  return true;
}

void OriginalEdges::Swap(OriginalEdges* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OriginalEdges::InternalSwap(OriginalEdges* other) {
  edges_.UnsafeArenaSwap(&other->edges_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OriginalEdges::GetMetadata() const {
  protobuf_edge_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_edge_2dbased_2dgraph_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OriginalEdges

// repeated .pbebg.OriginalEdgeData edges = 1;
int OriginalEdges::edges_size() const {
  return edges_.size();
}
void OriginalEdges::clear_edges() {
  edges_.Clear();
}
const ::pbebg::OriginalEdgeData& OriginalEdges::edges(int index) const {
  // @@protoc_insertion_point(field_get:pbebg.OriginalEdges.edges)
  return edges_.Get(index);
}
::pbebg::OriginalEdgeData* OriginalEdges::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:pbebg.OriginalEdges.edges)
  return edges_.Mutable(index);
}
::pbebg::OriginalEdgeData* OriginalEdges::add_edges() {
  // @@protoc_insertion_point(field_add:pbebg.OriginalEdges.edges)
  return edges_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbebg::OriginalEdgeData >*
OriginalEdges::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:pbebg.OriginalEdges.edges)
  return &edges_;
}
const ::google::protobuf::RepeatedPtrField< ::pbebg::OriginalEdgeData >&
OriginalEdges::edges() const {
  // @@protoc_insertion_point(field_list:pbebg.OriginalEdges.edges)
  return edges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbebg

// @@protoc_insertion_point(global_scope)
