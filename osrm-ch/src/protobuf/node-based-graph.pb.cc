// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node-based-graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "node-based-graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbnbg {
class NodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node> {
} _Node_default_instance_;
class NodeListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeList> {
} _NodeList_default_instance_;
class EdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Edge> {
} _Edge_default_instance_;
class EdgeListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EdgeList> {
} _EdgeList_default_instance_;
class CompressedEdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompressedEdge> {
} _CompressedEdge_default_instance_;
class EdgeBucketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EdgeBucket> {
} _EdgeBucket_default_instance_;
class CompressedContainerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CompressedContainer> {
} _CompressedContainer_default_instance_;
class StreetNamesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StreetNames> {
} _StreetNames_default_instance_;

namespace protobuf_node_2dbased_2dgraph_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, osm_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, barrier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, traffic_light_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeList, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, name_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, backward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, roundabout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, access_restricted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, startpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, is_split_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeList, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeList, edges_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedEdge, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedEdge, weight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBucket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeBucket, edges_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedContainer, geometries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNames, names_packed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreetNames, name_offsets_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Node)},
  { 9, -1, sizeof(NodeList)},
  { 15, -1, sizeof(Edge)},
  { 29, -1, sizeof(EdgeList)},
  { 35, -1, sizeof(CompressedEdge)},
  { 41, -1, sizeof(EdgeBucket)},
  { 46, -1, sizeof(CompressedContainer)},
  { 51, -1, sizeof(StreetNames)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Edge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EdgeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompressedEdge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EdgeBucket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CompressedContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StreetNames_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "node-based-graph.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _Node_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _NodeList_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Edge_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _EdgeList_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CompressedEdge_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _EdgeBucket_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CompressedContainer_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _StreetNames_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Node_default_instance_.DefaultConstruct();
  _NodeList_default_instance_.DefaultConstruct();
  _Edge_default_instance_.DefaultConstruct();
  _EdgeList_default_instance_.DefaultConstruct();
  _CompressedEdge_default_instance_.DefaultConstruct();
  _EdgeBucket_default_instance_.DefaultConstruct();
  _CompressedContainer_default_instance_.DefaultConstruct();
  _StreetNames_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026node-based-graph.proto\022\005pbnbg\"X\n\004Node\022"
      "\013\n\003lat\030\001 \001(\005\022\013\n\003lon\030\002 \001(\005\022\016\n\006osm_id\030\003 \001("
      "\003\022\017\n\007barrier\030\004 \001(\010\022\025\n\rtraffic_light\030\005 \001("
      "\010\"5\n\010NodeList\022\r\n\005count\030\001 \001(\003\022\032\n\005nodes\030\002 "
      "\003(\0132\013.pbnbg.Node\"\277\001\n\004Edge\022\016\n\006source\030\001 \001("
      "\003\022\016\n\006target\030\002 \001(\003\022\017\n\007name_id\030\003 \001(\003\022\016\n\006we"
      "ight\030\004 \001(\003\022\017\n\007forward\030\005 \001(\010\022\020\n\010backward\030"
      "\006 \001(\010\022\022\n\nroundabout\030\007 \001(\010\022\031\n\021access_rest"
      "ricted\030\010 \001(\010\022\022\n\nstartpoint\030\t \001(\010\022\020\n\010is_s"
      "plit\030\n \001(\010\"5\n\010EdgeList\022\r\n\005count\030\001 \001(\003\022\032\n"
      "\005edges\030\002 \003(\0132\013.pbnbg.Edge\"1\n\016CompressedE"
      "dge\022\017\n\007node_id\030\001 \001(\004\022\016\n\006weight\030\002 \001(\003\"2\n\n"
      "EdgeBucket\022$\n\005edges\030\001 \003(\0132\025.pbnbg.Compre"
      "ssedEdge\"<\n\023CompressedContainer\022%\n\ngeome"
      "tries\030\001 \003(\0132\021.pbnbg.EdgeBucket\"9\n\013Street"
      "Names\022\024\n\014names_packed\030\001 \001(\t\022\024\n\014name_offs"
      "ets\030\002 \003(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 657);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "node-based-graph.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_node_2dbased_2dgraph_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kLatFieldNumber;
const int Node::kLonFieldNumber;
const int Node::kOsmIdFieldNumber;
const int Node::kBarrierFieldNumber;
const int Node::kTrafficLightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    reinterpret_cast<char*>(&traffic_light_) -
    reinterpret_cast<char*>(&lat_) + sizeof(traffic_light_));
  // @@protoc_insertion_point(copy_constructor:pbnbg.Node)
}

void Node::SharedCtor() {
  ::memset(&lat_, 0, reinterpret_cast<char*>(&traffic_light_) -
    reinterpret_cast<char*>(&lat_) + sizeof(traffic_light_));
  _cached_size_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:pbnbg.Node)
  SharedDtor();
}

void Node::SharedDtor() {
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[0].descriptor;
}

const Node& Node::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.Node)
  ::memset(&lat_, 0, reinterpret_cast<char*>(&traffic_light_) -
    reinterpret_cast<char*>(&lat_) + sizeof(traffic_light_));
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 lat = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lon = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 osm_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &osm_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool barrier = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &barrier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool traffic_light = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &traffic_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.Node)
  // int32 lat = 1;
  if (this->lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lat(), output);
  }

  // int32 lon = 2;
  if (this->lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lon(), output);
  }

  // int64 osm_id = 3;
  if (this->osm_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->osm_id(), output);
  }

  // bool barrier = 4;
  if (this->barrier() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->barrier(), output);
  }

  // bool traffic_light = 5;
  if (this->traffic_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->traffic_light(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbnbg.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.Node)
  // int32 lat = 1;
  if (this->lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lat(), target);
  }

  // int32 lon = 2;
  if (this->lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lon(), target);
  }

  // int64 osm_id = 3;
  if (this->osm_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->osm_id(), target);
  }

  // bool barrier = 4;
  if (this->barrier() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->barrier(), target);
  }

  // bool traffic_light = 5;
  if (this->traffic_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->traffic_light(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.Node)
  size_t total_size = 0;

  // int32 lat = 1;
  if (this->lat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lat());
  }

  // int32 lon = 2;
  if (this->lon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lon());
  }

  // int64 osm_id = 3;
  if (this->osm_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->osm_id());
  }

  // bool barrier = 4;
  if (this->barrier() != 0) {
    total_size += 1 + 1;
  }

  // bool traffic_light = 5;
  if (this->traffic_light() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.lat() != 0) {
    set_lat(from.lat());
  }
  if (from.lon() != 0) {
    set_lon(from.lon());
  }
  if (from.osm_id() != 0) {
    set_osm_id(from.osm_id());
  }
  if (from.barrier() != 0) {
    set_barrier(from.barrier());
  }
  if (from.traffic_light() != 0) {
    set_traffic_light(from.traffic_light());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  std::swap(lat_, other->lat_);
  std::swap(lon_, other->lon_);
  std::swap(osm_id_, other->osm_id_);
  std::swap(barrier_, other->barrier_);
  std::swap(traffic_light_, other->traffic_light_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// int32 lat = 1;
void Node::clear_lat() {
  lat_ = 0;
}
::google::protobuf::int32 Node::lat() const {
  // @@protoc_insertion_point(field_get:pbnbg.Node.lat)
  return lat_;
}
void Node::set_lat(::google::protobuf::int32 value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Node.lat)
}

// int32 lon = 2;
void Node::clear_lon() {
  lon_ = 0;
}
::google::protobuf::int32 Node::lon() const {
  // @@protoc_insertion_point(field_get:pbnbg.Node.lon)
  return lon_;
}
void Node::set_lon(::google::protobuf::int32 value) {
  
  lon_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Node.lon)
}

// int64 osm_id = 3;
void Node::clear_osm_id() {
  osm_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Node::osm_id() const {
  // @@protoc_insertion_point(field_get:pbnbg.Node.osm_id)
  return osm_id_;
}
void Node::set_osm_id(::google::protobuf::int64 value) {
  
  osm_id_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Node.osm_id)
}

// bool barrier = 4;
void Node::clear_barrier() {
  barrier_ = false;
}
bool Node::barrier() const {
  // @@protoc_insertion_point(field_get:pbnbg.Node.barrier)
  return barrier_;
}
void Node::set_barrier(bool value) {
  
  barrier_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Node.barrier)
}

// bool traffic_light = 5;
void Node::clear_traffic_light() {
  traffic_light_ = false;
}
bool Node::traffic_light() const {
  // @@protoc_insertion_point(field_get:pbnbg.Node.traffic_light)
  return traffic_light_;
}
void Node::set_traffic_light(bool value) {
  
  traffic_light_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Node.traffic_light)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeList::kCountFieldNumber;
const int NodeList::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeList::NodeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.NodeList)
}
NodeList::NodeList(const NodeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:pbnbg.NodeList)
}

void NodeList::SharedCtor() {
  count_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

NodeList::~NodeList() {
  // @@protoc_insertion_point(destructor:pbnbg.NodeList)
  SharedDtor();
}

void NodeList::SharedDtor() {
}

void NodeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeList::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[1].descriptor;
}

const NodeList& NodeList::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeList* NodeList::New(::google::protobuf::Arena* arena) const {
  NodeList* n = new NodeList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeList::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.NodeList)
  nodes_.Clear();
  count_ = GOOGLE_LONGLONG(0);
}

bool NodeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.NodeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 count = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pbnbg.Node nodes = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.NodeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.NodeList)
  return false;
#undef DO_
}

void NodeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.NodeList)
  // int64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // repeated .pbnbg.Node nodes = 2;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodes(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbnbg.NodeList)
}

::google::protobuf::uint8* NodeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.NodeList)
  // int64 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // repeated .pbnbg.Node nodes = 2;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->nodes(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.NodeList)
  return target;
}

size_t NodeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.NodeList)
  size_t total_size = 0;

  // repeated .pbnbg.Node nodes = 2;
  {
    unsigned int count = this->nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(i));
    }
  }

  // int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.NodeList)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.NodeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.NodeList)
    MergeFrom(*source);
  }
}

void NodeList::MergeFrom(const NodeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.NodeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodes_.MergeFrom(from.nodes_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void NodeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.NodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeList::CopyFrom(const NodeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.NodeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeList::IsInitialized() const {
  return true;
}

void NodeList::Swap(NodeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeList::InternalSwap(NodeList* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeList::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeList

// int64 count = 1;
void NodeList::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NodeList::count() const {
  // @@protoc_insertion_point(field_get:pbnbg.NodeList.count)
  return count_;
}
void NodeList::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.NodeList.count)
}

// repeated .pbnbg.Node nodes = 2;
int NodeList::nodes_size() const {
  return nodes_.size();
}
void NodeList::clear_nodes() {
  nodes_.Clear();
}
const ::pbnbg::Node& NodeList::nodes(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.NodeList.nodes)
  return nodes_.Get(index);
}
::pbnbg::Node* NodeList::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:pbnbg.NodeList.nodes)
  return nodes_.Mutable(index);
}
::pbnbg::Node* NodeList::add_nodes() {
  // @@protoc_insertion_point(field_add:pbnbg.NodeList.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnbg::Node >*
NodeList::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.NodeList.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnbg::Node >&
NodeList::nodes() const {
  // @@protoc_insertion_point(field_list:pbnbg.NodeList.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kSourceFieldNumber;
const int Edge::kTargetFieldNumber;
const int Edge::kNameIdFieldNumber;
const int Edge::kWeightFieldNumber;
const int Edge::kForwardFieldNumber;
const int Edge::kBackwardFieldNumber;
const int Edge::kRoundaboutFieldNumber;
const int Edge::kAccessRestrictedFieldNumber;
const int Edge::kStartpointFieldNumber;
const int Edge::kIsSplitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.Edge)
}
Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    reinterpret_cast<char*>(&is_split_) -
    reinterpret_cast<char*>(&source_) + sizeof(is_split_));
  // @@protoc_insertion_point(copy_constructor:pbnbg.Edge)
}

void Edge::SharedCtor() {
  ::memset(&source_, 0, reinterpret_cast<char*>(&is_split_) -
    reinterpret_cast<char*>(&source_) + sizeof(is_split_));
  _cached_size_ = 0;
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:pbnbg.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[2].descriptor;
}

const Edge& Edge::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

Edge* Edge::New(::google::protobuf::Arena* arena) const {
  Edge* n = new Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.Edge)
  ::memset(&source_, 0, reinterpret_cast<char*>(&is_split_) -
    reinterpret_cast<char*>(&source_) + sizeof(is_split_));
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 source = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 target = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 name_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &name_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 weight = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool forward = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool backward = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool roundabout = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &roundabout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool access_restricted = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &access_restricted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool startpoint = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &startpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_split = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.Edge)
  // int64 source = 1;
  if (this->source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->source(), output);
  }

  // int64 target = 2;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->target(), output);
  }

  // int64 name_id = 3;
  if (this->name_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->name_id(), output);
  }

  // int64 weight = 4;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->weight(), output);
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->forward(), output);
  }

  // bool backward = 6;
  if (this->backward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->backward(), output);
  }

  // bool roundabout = 7;
  if (this->roundabout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->roundabout(), output);
  }

  // bool access_restricted = 8;
  if (this->access_restricted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->access_restricted(), output);
  }

  // bool startpoint = 9;
  if (this->startpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->startpoint(), output);
  }

  // bool is_split = 10;
  if (this->is_split() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_split(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbnbg.Edge)
}

::google::protobuf::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.Edge)
  // int64 source = 1;
  if (this->source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->source(), target);
  }

  // int64 target = 2;
  if (this->target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->target(), target);
  }

  // int64 name_id = 3;
  if (this->name_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->name_id(), target);
  }

  // int64 weight = 4;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->weight(), target);
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->forward(), target);
  }

  // bool backward = 6;
  if (this->backward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->backward(), target);
  }

  // bool roundabout = 7;
  if (this->roundabout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->roundabout(), target);
  }

  // bool access_restricted = 8;
  if (this->access_restricted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->access_restricted(), target);
  }

  // bool startpoint = 9;
  if (this->startpoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->startpoint(), target);
  }

  // bool is_split = 10;
  if (this->is_split() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_split(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.Edge)
  size_t total_size = 0;

  // int64 source = 1;
  if (this->source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source());
  }

  // int64 target = 2;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target());
  }

  // int64 name_id = 3;
  if (this->name_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->name_id());
  }

  // int64 weight = 4;
  if (this->weight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->weight());
  }

  // bool forward = 5;
  if (this->forward() != 0) {
    total_size += 1 + 1;
  }

  // bool backward = 6;
  if (this->backward() != 0) {
    total_size += 1 + 1;
  }

  // bool roundabout = 7;
  if (this->roundabout() != 0) {
    total_size += 1 + 1;
  }

  // bool access_restricted = 8;
  if (this->access_restricted() != 0) {
    total_size += 1 + 1;
  }

  // bool startpoint = 9;
  if (this->startpoint() != 0) {
    total_size += 1 + 1;
  }

  // bool is_split = 10;
  if (this->is_split() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.source() != 0) {
    set_source(from.source());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
  if (from.name_id() != 0) {
    set_name_id(from.name_id());
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
  if (from.forward() != 0) {
    set_forward(from.forward());
  }
  if (from.backward() != 0) {
    set_backward(from.backward());
  }
  if (from.roundabout() != 0) {
    set_roundabout(from.roundabout());
  }
  if (from.access_restricted() != 0) {
    set_access_restricted(from.access_restricted());
  }
  if (from.startpoint() != 0) {
    set_startpoint(from.startpoint());
  }
  if (from.is_split() != 0) {
    set_is_split(from.is_split());
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  std::swap(source_, other->source_);
  std::swap(target_, other->target_);
  std::swap(name_id_, other->name_id_);
  std::swap(weight_, other->weight_);
  std::swap(forward_, other->forward_);
  std::swap(backward_, other->backward_);
  std::swap(roundabout_, other->roundabout_);
  std::swap(access_restricted_, other->access_restricted_);
  std::swap(startpoint_, other->startpoint_);
  std::swap(is_split_, other->is_split_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edge

// int64 source = 1;
void Edge::clear_source() {
  source_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Edge::source() const {
  // @@protoc_insertion_point(field_get:pbnbg.Edge.source)
  return source_;
}
void Edge::set_source(::google::protobuf::int64 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Edge.source)
}

// int64 target = 2;
void Edge::clear_target() {
  target_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Edge::target() const {
  // @@protoc_insertion_point(field_get:pbnbg.Edge.target)
  return target_;
}
void Edge::set_target(::google::protobuf::int64 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Edge.target)
}

// int64 name_id = 3;
void Edge::clear_name_id() {
  name_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Edge::name_id() const {
  // @@protoc_insertion_point(field_get:pbnbg.Edge.name_id)
  return name_id_;
}
void Edge::set_name_id(::google::protobuf::int64 value) {
  
  name_id_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Edge.name_id)
}

// int64 weight = 4;
void Edge::clear_weight() {
  weight_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Edge::weight() const {
  // @@protoc_insertion_point(field_get:pbnbg.Edge.weight)
  return weight_;
}
void Edge::set_weight(::google::protobuf::int64 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Edge.weight)
}

// bool forward = 5;
void Edge::clear_forward() {
  forward_ = false;
}
bool Edge::forward() const {
  // @@protoc_insertion_point(field_get:pbnbg.Edge.forward)
  return forward_;
}
void Edge::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Edge.forward)
}

// bool backward = 6;
void Edge::clear_backward() {
  backward_ = false;
}
bool Edge::backward() const {
  // @@protoc_insertion_point(field_get:pbnbg.Edge.backward)
  return backward_;
}
void Edge::set_backward(bool value) {
  
  backward_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Edge.backward)
}

// bool roundabout = 7;
void Edge::clear_roundabout() {
  roundabout_ = false;
}
bool Edge::roundabout() const {
  // @@protoc_insertion_point(field_get:pbnbg.Edge.roundabout)
  return roundabout_;
}
void Edge::set_roundabout(bool value) {
  
  roundabout_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Edge.roundabout)
}

// bool access_restricted = 8;
void Edge::clear_access_restricted() {
  access_restricted_ = false;
}
bool Edge::access_restricted() const {
  // @@protoc_insertion_point(field_get:pbnbg.Edge.access_restricted)
  return access_restricted_;
}
void Edge::set_access_restricted(bool value) {
  
  access_restricted_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Edge.access_restricted)
}

// bool startpoint = 9;
void Edge::clear_startpoint() {
  startpoint_ = false;
}
bool Edge::startpoint() const {
  // @@protoc_insertion_point(field_get:pbnbg.Edge.startpoint)
  return startpoint_;
}
void Edge::set_startpoint(bool value) {
  
  startpoint_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Edge.startpoint)
}

// bool is_split = 10;
void Edge::clear_is_split() {
  is_split_ = false;
}
bool Edge::is_split() const {
  // @@protoc_insertion_point(field_get:pbnbg.Edge.is_split)
  return is_split_;
}
void Edge::set_is_split(bool value) {
  
  is_split_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.Edge.is_split)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgeList::kCountFieldNumber;
const int EdgeList::kEdgesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgeList::EdgeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.EdgeList)
}
EdgeList::EdgeList(const EdgeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      edges_(from.edges_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:pbnbg.EdgeList)
}

void EdgeList::SharedCtor() {
  count_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

EdgeList::~EdgeList() {
  // @@protoc_insertion_point(destructor:pbnbg.EdgeList)
  SharedDtor();
}

void EdgeList::SharedDtor() {
}

void EdgeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeList::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[3].descriptor;
}

const EdgeList& EdgeList::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

EdgeList* EdgeList::New(::google::protobuf::Arena* arena) const {
  EdgeList* n = new EdgeList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EdgeList::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.EdgeList)
  edges_.Clear();
  count_ = GOOGLE_LONGLONG(0);
}

bool EdgeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.EdgeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 count = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pbnbg.Edge edges = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.EdgeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.EdgeList)
  return false;
#undef DO_
}

void EdgeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.EdgeList)
  // int64 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // repeated .pbnbg.Edge edges = 2;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->edges(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbnbg.EdgeList)
}

::google::protobuf::uint8* EdgeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.EdgeList)
  // int64 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // repeated .pbnbg.Edge edges = 2;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->edges(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.EdgeList)
  return target;
}

size_t EdgeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.EdgeList)
  size_t total_size = 0;

  // repeated .pbnbg.Edge edges = 2;
  {
    unsigned int count = this->edges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edges(i));
    }
  }

  // int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.EdgeList)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.EdgeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.EdgeList)
    MergeFrom(*source);
  }
}

void EdgeList::MergeFrom(const EdgeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.EdgeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  edges_.MergeFrom(from.edges_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void EdgeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.EdgeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeList::CopyFrom(const EdgeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.EdgeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeList::IsInitialized() const {
  return true;
}

void EdgeList::Swap(EdgeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgeList::InternalSwap(EdgeList* other) {
  edges_.UnsafeArenaSwap(&other->edges_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgeList::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EdgeList

// int64 count = 1;
void EdgeList::clear_count() {
  count_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 EdgeList::count() const {
  // @@protoc_insertion_point(field_get:pbnbg.EdgeList.count)
  return count_;
}
void EdgeList::set_count(::google::protobuf::int64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.EdgeList.count)
}

// repeated .pbnbg.Edge edges = 2;
int EdgeList::edges_size() const {
  return edges_.size();
}
void EdgeList::clear_edges() {
  edges_.Clear();
}
const ::pbnbg::Edge& EdgeList::edges(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.EdgeList.edges)
  return edges_.Get(index);
}
::pbnbg::Edge* EdgeList::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:pbnbg.EdgeList.edges)
  return edges_.Mutable(index);
}
::pbnbg::Edge* EdgeList::add_edges() {
  // @@protoc_insertion_point(field_add:pbnbg.EdgeList.edges)
  return edges_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnbg::Edge >*
EdgeList::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.EdgeList.edges)
  return &edges_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnbg::Edge >&
EdgeList::edges() const {
  // @@protoc_insertion_point(field_list:pbnbg.EdgeList.edges)
  return edges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedEdge::kNodeIdFieldNumber;
const int CompressedEdge::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedEdge::CompressedEdge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.CompressedEdge)
}
CompressedEdge::CompressedEdge(const CompressedEdge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:pbnbg.CompressedEdge)
}

void CompressedEdge::SharedCtor() {
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(weight_));
  _cached_size_ = 0;
}

CompressedEdge::~CompressedEdge() {
  // @@protoc_insertion_point(destructor:pbnbg.CompressedEdge)
  SharedDtor();
}

void CompressedEdge::SharedDtor() {
}

void CompressedEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedEdge::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[4].descriptor;
}

const CompressedEdge& CompressedEdge::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompressedEdge* CompressedEdge::New(::google::protobuf::Arena* arena) const {
  CompressedEdge* n = new CompressedEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.CompressedEdge)
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(weight_));
}

bool CompressedEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.CompressedEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 node_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 weight = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.CompressedEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.CompressedEdge)
  return false;
#undef DO_
}

void CompressedEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.CompressedEdge)
  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->node_id(), output);
  }

  // int64 weight = 2;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->weight(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbnbg.CompressedEdge)
}

::google::protobuf::uint8* CompressedEdge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.CompressedEdge)
  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->node_id(), target);
  }

  // int64 weight = 2;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->weight(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.CompressedEdge)
  return target;
}

size_t CompressedEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.CompressedEdge)
  size_t total_size = 0;

  // uint64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->node_id());
  }

  // int64 weight = 2;
  if (this->weight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->weight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedEdge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.CompressedEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedEdge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedEdge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.CompressedEdge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.CompressedEdge)
    MergeFrom(*source);
  }
}

void CompressedEdge::MergeFrom(const CompressedEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.CompressedEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
}

void CompressedEdge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.CompressedEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedEdge::CopyFrom(const CompressedEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.CompressedEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedEdge::IsInitialized() const {
  return true;
}

void CompressedEdge::Swap(CompressedEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedEdge::InternalSwap(CompressedEdge* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(weight_, other->weight_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedEdge::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedEdge

// uint64 node_id = 1;
void CompressedEdge::clear_node_id() {
  node_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CompressedEdge::node_id() const {
  // @@protoc_insertion_point(field_get:pbnbg.CompressedEdge.node_id)
  return node_id_;
}
void CompressedEdge::set_node_id(::google::protobuf::uint64 value) {
  
  node_id_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.CompressedEdge.node_id)
}

// int64 weight = 2;
void CompressedEdge::clear_weight() {
  weight_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CompressedEdge::weight() const {
  // @@protoc_insertion_point(field_get:pbnbg.CompressedEdge.weight)
  return weight_;
}
void CompressedEdge::set_weight(::google::protobuf::int64 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:pbnbg.CompressedEdge.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgeBucket::kEdgesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgeBucket::EdgeBucket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.EdgeBucket)
}
EdgeBucket::EdgeBucket(const EdgeBucket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      edges_(from.edges_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnbg.EdgeBucket)
}

void EdgeBucket::SharedCtor() {
  _cached_size_ = 0;
}

EdgeBucket::~EdgeBucket() {
  // @@protoc_insertion_point(destructor:pbnbg.EdgeBucket)
  SharedDtor();
}

void EdgeBucket::SharedDtor() {
}

void EdgeBucket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeBucket::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[5].descriptor;
}

const EdgeBucket& EdgeBucket::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

EdgeBucket* EdgeBucket::New(::google::protobuf::Arena* arena) const {
  EdgeBucket* n = new EdgeBucket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EdgeBucket::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.EdgeBucket)
  edges_.Clear();
}

bool EdgeBucket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.EdgeBucket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnbg.CompressedEdge edges = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.EdgeBucket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.EdgeBucket)
  return false;
#undef DO_
}

void EdgeBucket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.EdgeBucket)
  // repeated .pbnbg.CompressedEdge edges = 1;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->edges(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbnbg.EdgeBucket)
}

::google::protobuf::uint8* EdgeBucket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.EdgeBucket)
  // repeated .pbnbg.CompressedEdge edges = 1;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->edges(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.EdgeBucket)
  return target;
}

size_t EdgeBucket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.EdgeBucket)
  size_t total_size = 0;

  // repeated .pbnbg.CompressedEdge edges = 1;
  {
    unsigned int count = this->edges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edges(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeBucket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.EdgeBucket)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeBucket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgeBucket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.EdgeBucket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.EdgeBucket)
    MergeFrom(*source);
  }
}

void EdgeBucket::MergeFrom(const EdgeBucket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.EdgeBucket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  edges_.MergeFrom(from.edges_);
}

void EdgeBucket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.EdgeBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeBucket::CopyFrom(const EdgeBucket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.EdgeBucket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeBucket::IsInitialized() const {
  return true;
}

void EdgeBucket::Swap(EdgeBucket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgeBucket::InternalSwap(EdgeBucket* other) {
  edges_.UnsafeArenaSwap(&other->edges_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgeBucket::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EdgeBucket

// repeated .pbnbg.CompressedEdge edges = 1;
int EdgeBucket::edges_size() const {
  return edges_.size();
}
void EdgeBucket::clear_edges() {
  edges_.Clear();
}
const ::pbnbg::CompressedEdge& EdgeBucket::edges(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.EdgeBucket.edges)
  return edges_.Get(index);
}
::pbnbg::CompressedEdge* EdgeBucket::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:pbnbg.EdgeBucket.edges)
  return edges_.Mutable(index);
}
::pbnbg::CompressedEdge* EdgeBucket::add_edges() {
  // @@protoc_insertion_point(field_add:pbnbg.EdgeBucket.edges)
  return edges_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnbg::CompressedEdge >*
EdgeBucket::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.EdgeBucket.edges)
  return &edges_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnbg::CompressedEdge >&
EdgeBucket::edges() const {
  // @@protoc_insertion_point(field_list:pbnbg.EdgeBucket.edges)
  return edges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedContainer::kGeometriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedContainer::CompressedContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.CompressedContainer)
}
CompressedContainer::CompressedContainer(const CompressedContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      geometries_(from.geometries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbnbg.CompressedContainer)
}

void CompressedContainer::SharedCtor() {
  _cached_size_ = 0;
}

CompressedContainer::~CompressedContainer() {
  // @@protoc_insertion_point(destructor:pbnbg.CompressedContainer)
  SharedDtor();
}

void CompressedContainer::SharedDtor() {
}

void CompressedContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedContainer::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[6].descriptor;
}

const CompressedContainer& CompressedContainer::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

CompressedContainer* CompressedContainer::New(::google::protobuf::Arena* arena) const {
  CompressedContainer* n = new CompressedContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CompressedContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.CompressedContainer)
  geometries_.Clear();
}

bool CompressedContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.CompressedContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbnbg.EdgeBucket geometries = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_geometries()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.CompressedContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.CompressedContainer)
  return false;
#undef DO_
}

void CompressedContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.CompressedContainer)
  // repeated .pbnbg.EdgeBucket geometries = 1;
  for (unsigned int i = 0, n = this->geometries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->geometries(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbnbg.CompressedContainer)
}

::google::protobuf::uint8* CompressedContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.CompressedContainer)
  // repeated .pbnbg.EdgeBucket geometries = 1;
  for (unsigned int i = 0, n = this->geometries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->geometries(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.CompressedContainer)
  return target;
}

size_t CompressedContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.CompressedContainer)
  size_t total_size = 0;

  // repeated .pbnbg.EdgeBucket geometries = 1;
  {
    unsigned int count = this->geometries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometries(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.CompressedContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedContainer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CompressedContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.CompressedContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.CompressedContainer)
    MergeFrom(*source);
  }
}

void CompressedContainer::MergeFrom(const CompressedContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.CompressedContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geometries_.MergeFrom(from.geometries_);
}

void CompressedContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.CompressedContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedContainer::CopyFrom(const CompressedContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.CompressedContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedContainer::IsInitialized() const {
  return true;
}

void CompressedContainer::Swap(CompressedContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedContainer::InternalSwap(CompressedContainer* other) {
  geometries_.UnsafeArenaSwap(&other->geometries_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CompressedContainer::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CompressedContainer

// repeated .pbnbg.EdgeBucket geometries = 1;
int CompressedContainer::geometries_size() const {
  return geometries_.size();
}
void CompressedContainer::clear_geometries() {
  geometries_.Clear();
}
const ::pbnbg::EdgeBucket& CompressedContainer::geometries(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.CompressedContainer.geometries)
  return geometries_.Get(index);
}
::pbnbg::EdgeBucket* CompressedContainer::mutable_geometries(int index) {
  // @@protoc_insertion_point(field_mutable:pbnbg.CompressedContainer.geometries)
  return geometries_.Mutable(index);
}
::pbnbg::EdgeBucket* CompressedContainer::add_geometries() {
  // @@protoc_insertion_point(field_add:pbnbg.CompressedContainer.geometries)
  return geometries_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbnbg::EdgeBucket >*
CompressedContainer::mutable_geometries() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.CompressedContainer.geometries)
  return &geometries_;
}
const ::google::protobuf::RepeatedPtrField< ::pbnbg::EdgeBucket >&
CompressedContainer::geometries() const {
  // @@protoc_insertion_point(field_list:pbnbg.CompressedContainer.geometries)
  return geometries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreetNames::kNamesPackedFieldNumber;
const int StreetNames::kNameOffsetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreetNames::StreetNames()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbnbg.StreetNames)
}
StreetNames::StreetNames(const StreetNames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      name_offsets_(from.name_offsets_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  names_packed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.names_packed().size() > 0) {
    names_packed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.names_packed_);
  }
  // @@protoc_insertion_point(copy_constructor:pbnbg.StreetNames)
}

void StreetNames::SharedCtor() {
  names_packed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

StreetNames::~StreetNames() {
  // @@protoc_insertion_point(destructor:pbnbg.StreetNames)
  SharedDtor();
}

void StreetNames::SharedDtor() {
  names_packed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreetNames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreetNames::descriptor() {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[7].descriptor;
}

const StreetNames& StreetNames::default_instance() {
  protobuf_node_2dbased_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

StreetNames* StreetNames::New(::google::protobuf::Arena* arena) const {
  StreetNames* n = new StreetNames;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StreetNames::Clear() {
// @@protoc_insertion_point(message_clear_start:pbnbg.StreetNames)
  name_offsets_.Clear();
  names_packed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool StreetNames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbnbg.StreetNames)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string names_packed = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_names_packed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->names_packed().data(), this->names_packed().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pbnbg.StreetNames.names_packed"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 name_offsets = 2;
      case 2: {
        if (tag == 18u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_name_offsets())));
        } else if (tag == 16u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_name_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbnbg.StreetNames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbnbg.StreetNames)
  return false;
#undef DO_
}

void StreetNames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbnbg.StreetNames)
  // string names_packed = 1;
  if (this->names_packed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names_packed().data(), this->names_packed().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pbnbg.StreetNames.names_packed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->names_packed(), output);
  }

  // repeated uint32 name_offsets = 2;
  if (this->name_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_name_offsets_cached_byte_size_);
  }
  for (int i = 0; i < this->name_offsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->name_offsets(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbnbg.StreetNames)
}

::google::protobuf::uint8* StreetNames::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbnbg.StreetNames)
  // string names_packed = 1;
  if (this->names_packed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->names_packed().data(), this->names_packed().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pbnbg.StreetNames.names_packed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->names_packed(), target);
  }

  // repeated uint32 name_offsets = 2;
  if (this->name_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _name_offsets_cached_byte_size_, target);
  }
  for (int i = 0; i < this->name_offsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->name_offsets(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbnbg.StreetNames)
  return target;
}

size_t StreetNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbnbg.StreetNames)
  size_t total_size = 0;

  // repeated uint32 name_offsets = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->name_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _name_offsets_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string names_packed = 1;
  if (this->names_packed().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->names_packed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreetNames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbnbg.StreetNames)
  GOOGLE_DCHECK_NE(&from, this);
  const StreetNames* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreetNames>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbnbg.StreetNames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbnbg.StreetNames)
    MergeFrom(*source);
  }
}

void StreetNames::MergeFrom(const StreetNames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbnbg.StreetNames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_offsets_.MergeFrom(from.name_offsets_);
  if (from.names_packed().size() > 0) {

    names_packed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.names_packed_);
  }
}

void StreetNames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbnbg.StreetNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreetNames::CopyFrom(const StreetNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbnbg.StreetNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreetNames::IsInitialized() const {
  return true;
}

void StreetNames::Swap(StreetNames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StreetNames::InternalSwap(StreetNames* other) {
  name_offsets_.UnsafeArenaSwap(&other->name_offsets_);
  names_packed_.Swap(&other->names_packed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreetNames::GetMetadata() const {
  protobuf_node_2dbased_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_node_2dbased_2dgraph_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StreetNames

// string names_packed = 1;
void StreetNames::clear_names_packed() {
  names_packed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& StreetNames::names_packed() const {
  // @@protoc_insertion_point(field_get:pbnbg.StreetNames.names_packed)
  return names_packed_.GetNoArena();
}
void StreetNames::set_names_packed(const ::std::string& value) {
  
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pbnbg.StreetNames.names_packed)
}
#if LANG_CXX11
void StreetNames::set_names_packed(::std::string&& value) {
  
  names_packed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pbnbg.StreetNames.names_packed)
}
#endif
void StreetNames::set_names_packed(const char* value) {
  
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pbnbg.StreetNames.names_packed)
}
void StreetNames::set_names_packed(const char* value, size_t size) {
  
  names_packed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pbnbg.StreetNames.names_packed)
}
::std::string* StreetNames::mutable_names_packed() {
  
  // @@protoc_insertion_point(field_mutable:pbnbg.StreetNames.names_packed)
  return names_packed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* StreetNames::release_names_packed() {
  // @@protoc_insertion_point(field_release:pbnbg.StreetNames.names_packed)
  
  return names_packed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void StreetNames::set_allocated_names_packed(::std::string* names_packed) {
  if (names_packed != NULL) {
    
  } else {
    
  }
  names_packed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), names_packed);
  // @@protoc_insertion_point(field_set_allocated:pbnbg.StreetNames.names_packed)
}

// repeated uint32 name_offsets = 2;
int StreetNames::name_offsets_size() const {
  return name_offsets_.size();
}
void StreetNames::clear_name_offsets() {
  name_offsets_.Clear();
}
::google::protobuf::uint32 StreetNames::name_offsets(int index) const {
  // @@protoc_insertion_point(field_get:pbnbg.StreetNames.name_offsets)
  return name_offsets_.Get(index);
}
void StreetNames::set_name_offsets(int index, ::google::protobuf::uint32 value) {
  name_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbnbg.StreetNames.name_offsets)
}
void StreetNames::add_name_offsets(::google::protobuf::uint32 value) {
  name_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:pbnbg.StreetNames.name_offsets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StreetNames::name_offsets() const {
  // @@protoc_insertion_point(field_list:pbnbg.StreetNames.name_offsets)
  return name_offsets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StreetNames::mutable_name_offsets() {
  // @@protoc_insertion_point(field_mutable_list:pbnbg.StreetNames.name_offsets)
  return &name_offsets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbnbg

// @@protoc_insertion_point(global_scope)
