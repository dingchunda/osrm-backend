// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query-graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "query-graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbqg {
class NodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Node> {
} _Node_default_instance_;
class EdgeDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EdgeData> {
} _EdgeData_default_instance_;
class EdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Edge> {
} _Edge_default_instance_;
class QueryGraphDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<QueryGraph> {
} _QueryGraph_default_instance_;
class NodeLevelsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NodeLevels> {
} _NodeLevels_default_instance_;

namespace protobuf_query_2dgraph_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, first_edge_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, shortcut_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, weight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdgeData, backward_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGraph, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGraph, e_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGraph, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGraph, edges_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLevels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLevels, levels_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Node)},
  { 5, -1, sizeof(EdgeData)},
  { 14, -1, sizeof(Edge)},
  { 20, -1, sizeof(QueryGraph)},
  { 28, -1, sizeof(NodeLevels)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EdgeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Edge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryGraph_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeLevels_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "query-graph.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _Node_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EdgeData_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Edge_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _QueryGraph_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _NodeLevels_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Node_default_instance_.DefaultConstruct();
  _EdgeData_default_instance_.DefaultConstruct();
  _Edge_default_instance_.DefaultConstruct();
  _QueryGraph_default_instance_.DefaultConstruct();
  _NodeLevels_default_instance_.DefaultConstruct();
  _Edge_default_instance_.get_mutable()->data_ = const_cast< ::pbqg::EdgeData*>(
      ::pbqg::EdgeData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021query-graph.proto\022\004pbqg\"\032\n\004Node\022\022\n\nfir"
      "st_edge\030\001 \001(\005\"[\n\010EdgeData\022\n\n\002id\030\001 \001(\005\022\020\n"
      "\010shortcut\030\002 \001(\010\022\016\n\006weight\030\003 \001(\005\022\017\n\007forwa"
      "rd\030\004 \001(\010\022\020\n\010backward\030\005 \001(\010\"4\n\004Edge\022\016\n\006ta"
      "rget\030\001 \001(\005\022\034\n\004data\030\002 \001(\0132\016.pbqg.EdgeData"
      "\"X\n\nQueryGraph\022\t\n\001V\030\001 \001(\005\022\t\n\001E\030\002 \001(\005\022\031\n\005"
      "nodes\030\003 \003(\0132\n.pbqg.Node\022\031\n\005edges\030\004 \003(\0132\n"
      ".pbqg.Edge\"\034\n\nNodeLevels\022\016\n\006levels\030\001 \003(\005"
      "b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "query-graph.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_query_2dgraph_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kFirstEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbqg.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  first_edge_ = from.first_edge_;
  // @@protoc_insertion_point(copy_constructor:pbqg.Node)
}

void Node::SharedCtor() {
  first_edge_ = 0;
  _cached_size_ = 0;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:pbqg.Node)
  SharedDtor();
}

void Node::SharedDtor() {
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_query_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_2dgraph_2eproto::file_level_metadata[0].descriptor;
}

const Node& Node::default_instance() {
  protobuf_query_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

Node* Node::New(::google::protobuf::Arena* arena) const {
  Node* n = new Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:pbqg.Node)
  first_edge_ = 0;
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbqg.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 first_edge = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_edge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbqg.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbqg.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbqg.Node)
  // int32 first_edge = 1;
  if (this->first_edge() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first_edge(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbqg.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbqg.Node)
  // int32 first_edge = 1;
  if (this->first_edge() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first_edge(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbqg.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbqg.Node)
  size_t total_size = 0;

  // int32 first_edge = 1;
  if (this->first_edge() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->first_edge());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbqg.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbqg.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbqg.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbqg.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.first_edge() != 0) {
    set_first_edge(from.first_edge());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbqg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbqg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  std::swap(first_edge_, other->first_edge_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_query_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_2dgraph_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Node

// int32 first_edge = 1;
void Node::clear_first_edge() {
  first_edge_ = 0;
}
::google::protobuf::int32 Node::first_edge() const {
  // @@protoc_insertion_point(field_get:pbqg.Node.first_edge)
  return first_edge_;
}
void Node::set_first_edge(::google::protobuf::int32 value) {
  
  first_edge_ = value;
  // @@protoc_insertion_point(field_set:pbqg.Node.first_edge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgeData::kIdFieldNumber;
const int EdgeData::kShortcutFieldNumber;
const int EdgeData::kWeightFieldNumber;
const int EdgeData::kForwardFieldNumber;
const int EdgeData::kBackwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgeData::EdgeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbqg.EdgeData)
}
EdgeData::EdgeData(const EdgeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&backward_) -
    reinterpret_cast<char*>(&id_) + sizeof(backward_));
  // @@protoc_insertion_point(copy_constructor:pbqg.EdgeData)
}

void EdgeData::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&backward_) -
    reinterpret_cast<char*>(&id_) + sizeof(backward_));
  _cached_size_ = 0;
}

EdgeData::~EdgeData() {
  // @@protoc_insertion_point(destructor:pbqg.EdgeData)
  SharedDtor();
}

void EdgeData::SharedDtor() {
}

void EdgeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdgeData::descriptor() {
  protobuf_query_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_2dgraph_2eproto::file_level_metadata[1].descriptor;
}

const EdgeData& EdgeData::default_instance() {
  protobuf_query_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

EdgeData* EdgeData::New(::google::protobuf::Arena* arena) const {
  EdgeData* n = new EdgeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EdgeData::Clear() {
// @@protoc_insertion_point(message_clear_start:pbqg.EdgeData)
  ::memset(&id_, 0, reinterpret_cast<char*>(&backward_) -
    reinterpret_cast<char*>(&id_) + sizeof(backward_));
}

bool EdgeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbqg.EdgeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shortcut = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shortcut_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 weight = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool forward = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool backward = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbqg.EdgeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbqg.EdgeData)
  return false;
#undef DO_
}

void EdgeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbqg.EdgeData)
  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // bool shortcut = 2;
  if (this->shortcut() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->shortcut(), output);
  }

  // int32 weight = 3;
  if (this->weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->weight(), output);
  }

  // bool forward = 4;
  if (this->forward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->forward(), output);
  }

  // bool backward = 5;
  if (this->backward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->backward(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbqg.EdgeData)
}

::google::protobuf::uint8* EdgeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbqg.EdgeData)
  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // bool shortcut = 2;
  if (this->shortcut() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->shortcut(), target);
  }

  // int32 weight = 3;
  if (this->weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->weight(), target);
  }

  // bool forward = 4;
  if (this->forward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->forward(), target);
  }

  // bool backward = 5;
  if (this->backward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->backward(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbqg.EdgeData)
  return target;
}

size_t EdgeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbqg.EdgeData)
  size_t total_size = 0;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 weight = 3;
  if (this->weight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->weight());
  }

  // bool shortcut = 2;
  if (this->shortcut() != 0) {
    total_size += 1 + 1;
  }

  // bool forward = 4;
  if (this->forward() != 0) {
    total_size += 1 + 1;
  }

  // bool backward = 5;
  if (this->backward() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdgeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbqg.EdgeData)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbqg.EdgeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbqg.EdgeData)
    MergeFrom(*source);
  }
}

void EdgeData::MergeFrom(const EdgeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbqg.EdgeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
  if (from.shortcut() != 0) {
    set_shortcut(from.shortcut());
  }
  if (from.forward() != 0) {
    set_forward(from.forward());
  }
  if (from.backward() != 0) {
    set_backward(from.backward());
  }
}

void EdgeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbqg.EdgeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeData::CopyFrom(const EdgeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbqg.EdgeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeData::IsInitialized() const {
  return true;
}

void EdgeData::Swap(EdgeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgeData::InternalSwap(EdgeData* other) {
  std::swap(id_, other->id_);
  std::swap(weight_, other->weight_);
  std::swap(shortcut_, other->shortcut_);
  std::swap(forward_, other->forward_);
  std::swap(backward_, other->backward_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EdgeData::GetMetadata() const {
  protobuf_query_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_2dgraph_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EdgeData

// int32 id = 1;
void EdgeData::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 EdgeData::id() const {
  // @@protoc_insertion_point(field_get:pbqg.EdgeData.id)
  return id_;
}
void EdgeData::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pbqg.EdgeData.id)
}

// bool shortcut = 2;
void EdgeData::clear_shortcut() {
  shortcut_ = false;
}
bool EdgeData::shortcut() const {
  // @@protoc_insertion_point(field_get:pbqg.EdgeData.shortcut)
  return shortcut_;
}
void EdgeData::set_shortcut(bool value) {
  
  shortcut_ = value;
  // @@protoc_insertion_point(field_set:pbqg.EdgeData.shortcut)
}

// int32 weight = 3;
void EdgeData::clear_weight() {
  weight_ = 0;
}
::google::protobuf::int32 EdgeData::weight() const {
  // @@protoc_insertion_point(field_get:pbqg.EdgeData.weight)
  return weight_;
}
void EdgeData::set_weight(::google::protobuf::int32 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:pbqg.EdgeData.weight)
}

// bool forward = 4;
void EdgeData::clear_forward() {
  forward_ = false;
}
bool EdgeData::forward() const {
  // @@protoc_insertion_point(field_get:pbqg.EdgeData.forward)
  return forward_;
}
void EdgeData::set_forward(bool value) {
  
  forward_ = value;
  // @@protoc_insertion_point(field_set:pbqg.EdgeData.forward)
}

// bool backward = 5;
void EdgeData::clear_backward() {
  backward_ = false;
}
bool EdgeData::backward() const {
  // @@protoc_insertion_point(field_get:pbqg.EdgeData.backward)
  return backward_;
}
void EdgeData::set_backward(bool value) {
  
  backward_ = value;
  // @@protoc_insertion_point(field_set:pbqg.EdgeData.backward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kTargetFieldNumber;
const int Edge::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbqg.Edge)
}
Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::pbqg::EdgeData(*from.data_);
  } else {
    data_ = NULL;
  }
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:pbqg.Edge)
}

void Edge::SharedCtor() {
  ::memset(&data_, 0, reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&data_) + sizeof(target_));
  _cached_size_ = 0;
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:pbqg.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_query_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_2dgraph_2eproto::file_level_metadata[2].descriptor;
}

const Edge& Edge::default_instance() {
  protobuf_query_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

Edge* Edge::New(::google::protobuf::Arena* arena) const {
  Edge* n = new Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:pbqg.Edge)
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  target_ = 0;
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbqg.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 target = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pbqg.EdgeData data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbqg.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbqg.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbqg.Edge)
  // int32 target = 1;
  if (this->target() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target(), output);
  }

  // .pbqg.EdgeData data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // @@protoc_insertion_point(serialize_end:pbqg.Edge)
}

::google::protobuf::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbqg.Edge)
  // int32 target = 1;
  if (this->target() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target(), target);
  }

  // .pbqg.EdgeData data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbqg.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbqg.Edge)
  size_t total_size = 0;

  // .pbqg.EdgeData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  // int32 target = 1;
  if (this->target() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbqg.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbqg.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbqg.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbqg.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    mutable_data()->::pbqg::EdgeData::MergeFrom(from.data());
  }
  if (from.target() != 0) {
    set_target(from.target());
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbqg.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbqg.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  std::swap(data_, other->data_);
  std::swap(target_, other->target_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_query_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_2dgraph_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edge

// int32 target = 1;
void Edge::clear_target() {
  target_ = 0;
}
::google::protobuf::int32 Edge::target() const {
  // @@protoc_insertion_point(field_get:pbqg.Edge.target)
  return target_;
}
void Edge::set_target(::google::protobuf::int32 value) {
  
  target_ = value;
  // @@protoc_insertion_point(field_set:pbqg.Edge.target)
}

// .pbqg.EdgeData data = 2;
bool Edge::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
void Edge::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) delete data_;
  data_ = NULL;
}
const ::pbqg::EdgeData& Edge::data() const {
  // @@protoc_insertion_point(field_get:pbqg.Edge.data)
  return data_ != NULL ? *data_
                         : *::pbqg::EdgeData::internal_default_instance();
}
::pbqg::EdgeData* Edge::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::pbqg::EdgeData;
  }
  // @@protoc_insertion_point(field_mutable:pbqg.Edge.data)
  return data_;
}
::pbqg::EdgeData* Edge::release_data() {
  // @@protoc_insertion_point(field_release:pbqg.Edge.data)
  
  ::pbqg::EdgeData* temp = data_;
  data_ = NULL;
  return temp;
}
void Edge::set_allocated_data(::pbqg::EdgeData* data) {
  delete data_;
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pbqg.Edge.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryGraph::kVFieldNumber;
const int QueryGraph::kEFieldNumber;
const int QueryGraph::kNodesFieldNumber;
const int QueryGraph::kEdgesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryGraph::QueryGraph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbqg.QueryGraph)
}
QueryGraph::QueryGraph(const QueryGraph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      edges_(from.edges_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&v_, &from.v_,
    reinterpret_cast<char*>(&e_) -
    reinterpret_cast<char*>(&v_) + sizeof(e_));
  // @@protoc_insertion_point(copy_constructor:pbqg.QueryGraph)
}

void QueryGraph::SharedCtor() {
  ::memset(&v_, 0, reinterpret_cast<char*>(&e_) -
    reinterpret_cast<char*>(&v_) + sizeof(e_));
  _cached_size_ = 0;
}

QueryGraph::~QueryGraph() {
  // @@protoc_insertion_point(destructor:pbqg.QueryGraph)
  SharedDtor();
}

void QueryGraph::SharedDtor() {
}

void QueryGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGraph::descriptor() {
  protobuf_query_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_2dgraph_2eproto::file_level_metadata[3].descriptor;
}

const QueryGraph& QueryGraph::default_instance() {
  protobuf_query_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryGraph* QueryGraph::New(::google::protobuf::Arena* arena) const {
  QueryGraph* n = new QueryGraph;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:pbqg.QueryGraph)
  nodes_.Clear();
  edges_.Clear();
  ::memset(&v_, 0, reinterpret_cast<char*>(&e_) -
    reinterpret_cast<char*>(&v_) + sizeof(e_));
}

bool QueryGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbqg.QueryGraph)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 V = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 E = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pbqg.Node nodes = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .pbqg.Edge edges = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edges()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbqg.QueryGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbqg.QueryGraph)
  return false;
#undef DO_
}

void QueryGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbqg.QueryGraph)
  // int32 V = 1;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->v(), output);
  }

  // int32 E = 2;
  if (this->e() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->e(), output);
  }

  // repeated .pbqg.Node nodes = 3;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->nodes(i), output);
  }

  // repeated .pbqg.Edge edges = 4;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->edges(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbqg.QueryGraph)
}

::google::protobuf::uint8* QueryGraph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbqg.QueryGraph)
  // int32 V = 1;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->v(), target);
  }

  // int32 E = 2;
  if (this->e() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->e(), target);
  }

  // repeated .pbqg.Node nodes = 3;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->nodes(i), false, target);
  }

  // repeated .pbqg.Edge edges = 4;
  for (unsigned int i = 0, n = this->edges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->edges(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbqg.QueryGraph)
  return target;
}

size_t QueryGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbqg.QueryGraph)
  size_t total_size = 0;

  // repeated .pbqg.Node nodes = 3;
  {
    unsigned int count = this->nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(i));
    }
  }

  // repeated .pbqg.Edge edges = 4;
  {
    unsigned int count = this->edges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edges(i));
    }
  }

  // int32 V = 1;
  if (this->v() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v());
  }

  // int32 E = 2;
  if (this->e() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->e());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbqg.QueryGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryGraph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryGraph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbqg.QueryGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbqg.QueryGraph)
    MergeFrom(*source);
  }
}

void QueryGraph::MergeFrom(const QueryGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbqg.QueryGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodes_.MergeFrom(from.nodes_);
  edges_.MergeFrom(from.edges_);
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.e() != 0) {
    set_e(from.e());
  }
}

void QueryGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbqg.QueryGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGraph::CopyFrom(const QueryGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbqg.QueryGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGraph::IsInitialized() const {
  return true;
}

void QueryGraph::Swap(QueryGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryGraph::InternalSwap(QueryGraph* other) {
  nodes_.UnsafeArenaSwap(&other->nodes_);
  edges_.UnsafeArenaSwap(&other->edges_);
  std::swap(v_, other->v_);
  std::swap(e_, other->e_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryGraph::GetMetadata() const {
  protobuf_query_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_2dgraph_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryGraph

// int32 V = 1;
void QueryGraph::clear_v() {
  v_ = 0;
}
::google::protobuf::int32 QueryGraph::v() const {
  // @@protoc_insertion_point(field_get:pbqg.QueryGraph.V)
  return v_;
}
void QueryGraph::set_v(::google::protobuf::int32 value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:pbqg.QueryGraph.V)
}

// int32 E = 2;
void QueryGraph::clear_e() {
  e_ = 0;
}
::google::protobuf::int32 QueryGraph::e() const {
  // @@protoc_insertion_point(field_get:pbqg.QueryGraph.E)
  return e_;
}
void QueryGraph::set_e(::google::protobuf::int32 value) {
  
  e_ = value;
  // @@protoc_insertion_point(field_set:pbqg.QueryGraph.E)
}

// repeated .pbqg.Node nodes = 3;
int QueryGraph::nodes_size() const {
  return nodes_.size();
}
void QueryGraph::clear_nodes() {
  nodes_.Clear();
}
const ::pbqg::Node& QueryGraph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:pbqg.QueryGraph.nodes)
  return nodes_.Get(index);
}
::pbqg::Node* QueryGraph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:pbqg.QueryGraph.nodes)
  return nodes_.Mutable(index);
}
::pbqg::Node* QueryGraph::add_nodes() {
  // @@protoc_insertion_point(field_add:pbqg.QueryGraph.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbqg::Node >*
QueryGraph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:pbqg.QueryGraph.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::pbqg::Node >&
QueryGraph::nodes() const {
  // @@protoc_insertion_point(field_list:pbqg.QueryGraph.nodes)
  return nodes_;
}

// repeated .pbqg.Edge edges = 4;
int QueryGraph::edges_size() const {
  return edges_.size();
}
void QueryGraph::clear_edges() {
  edges_.Clear();
}
const ::pbqg::Edge& QueryGraph::edges(int index) const {
  // @@protoc_insertion_point(field_get:pbqg.QueryGraph.edges)
  return edges_.Get(index);
}
::pbqg::Edge* QueryGraph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:pbqg.QueryGraph.edges)
  return edges_.Mutable(index);
}
::pbqg::Edge* QueryGraph::add_edges() {
  // @@protoc_insertion_point(field_add:pbqg.QueryGraph.edges)
  return edges_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbqg::Edge >*
QueryGraph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:pbqg.QueryGraph.edges)
  return &edges_;
}
const ::google::protobuf::RepeatedPtrField< ::pbqg::Edge >&
QueryGraph::edges() const {
  // @@protoc_insertion_point(field_list:pbqg.QueryGraph.edges)
  return edges_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeLevels::kLevelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeLevels::NodeLevels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_query_2dgraph_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbqg.NodeLevels)
}
NodeLevels::NodeLevels(const NodeLevels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      levels_(from.levels_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbqg.NodeLevels)
}

void NodeLevels::SharedCtor() {
  _cached_size_ = 0;
}

NodeLevels::~NodeLevels() {
  // @@protoc_insertion_point(destructor:pbqg.NodeLevels)
  SharedDtor();
}

void NodeLevels::SharedDtor() {
}

void NodeLevels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeLevels::descriptor() {
  protobuf_query_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_2dgraph_2eproto::file_level_metadata[4].descriptor;
}

const NodeLevels& NodeLevels::default_instance() {
  protobuf_query_2dgraph_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeLevels* NodeLevels::New(::google::protobuf::Arena* arena) const {
  NodeLevels* n = new NodeLevels;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeLevels::Clear() {
// @@protoc_insertion_point(message_clear_start:pbqg.NodeLevels)
  levels_.Clear();
}

bool NodeLevels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbqg.NodeLevels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 levels = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_levels())));
        } else if (tag == 8u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_levels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbqg.NodeLevels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbqg.NodeLevels)
  return false;
#undef DO_
}

void NodeLevels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbqg.NodeLevels)
  // repeated int32 levels = 1;
  if (this->levels_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_levels_cached_byte_size_);
  }
  for (int i = 0; i < this->levels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->levels(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbqg.NodeLevels)
}

::google::protobuf::uint8* NodeLevels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbqg.NodeLevels)
  // repeated int32 levels = 1;
  if (this->levels_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _levels_cached_byte_size_, target);
  }
  for (int i = 0; i < this->levels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->levels(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbqg.NodeLevels)
  return target;
}

size_t NodeLevels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbqg.NodeLevels)
  size_t total_size = 0;

  // repeated int32 levels = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->levels_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _levels_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeLevels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbqg.NodeLevels)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeLevels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeLevels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbqg.NodeLevels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbqg.NodeLevels)
    MergeFrom(*source);
  }
}

void NodeLevels::MergeFrom(const NodeLevels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbqg.NodeLevels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  levels_.MergeFrom(from.levels_);
}

void NodeLevels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbqg.NodeLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeLevels::CopyFrom(const NodeLevels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbqg.NodeLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeLevels::IsInitialized() const {
  return true;
}

void NodeLevels::Swap(NodeLevels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeLevels::InternalSwap(NodeLevels* other) {
  levels_.UnsafeArenaSwap(&other->levels_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeLevels::GetMetadata() const {
  protobuf_query_2dgraph_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_query_2dgraph_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeLevels

// repeated int32 levels = 1;
int NodeLevels::levels_size() const {
  return levels_.size();
}
void NodeLevels::clear_levels() {
  levels_.Clear();
}
::google::protobuf::int32 NodeLevels::levels(int index) const {
  // @@protoc_insertion_point(field_get:pbqg.NodeLevels.levels)
  return levels_.Get(index);
}
void NodeLevels::set_levels(int index, ::google::protobuf::int32 value) {
  levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbqg.NodeLevels.levels)
}
void NodeLevels::add_levels(::google::protobuf::int32 value) {
  levels_.Add(value);
  // @@protoc_insertion_point(field_add:pbqg.NodeLevels.levels)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NodeLevels::levels() const {
  // @@protoc_insertion_point(field_list:pbqg.NodeLevels.levels)
  return levels_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NodeLevels::mutable_levels() {
  // @@protoc_insertion_point(field_mutable_list:pbqg.NodeLevels.levels)
  return &levels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbqg

// @@protoc_insertion_point(global_scope)
