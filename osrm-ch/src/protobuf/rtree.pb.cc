// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtree.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rtree.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pbrtree {
class RectangleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Rectangle> {
} _Rectangle_default_instance_;
class LeafNodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LeafNode> {
} _LeafNode_default_instance_;
class LeavesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Leaves> {
} _Leaves_default_instance_;

namespace protobuf_rtree_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, min_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, min_lon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, max_lat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rectangle, max_lon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, itemcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, minimum_bounding_rectangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeafNode, items_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaves, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Leaves, items_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Rectangle)},
  { 8, -1, sizeof(LeafNode)},
  { 15, -1, sizeof(Leaves)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Rectangle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LeafNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Leaves_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rtree.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Rectangle_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LeafNode_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Leaves_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::pbebg::protobuf_edge_2dbased_2dgraph_2eproto::InitDefaults();
  _Rectangle_default_instance_.DefaultConstruct();
  _LeafNode_default_instance_.DefaultConstruct();
  _Leaves_default_instance_.DefaultConstruct();
  _LeafNode_default_instance_.get_mutable()->minimum_bounding_rectangle_ = const_cast< ::pbrtree::Rectangle*>(
      ::pbrtree::Rectangle::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013rtree.proto\022\007pbrtree\032\026edge-based-graph"
      ".proto\"O\n\tRectangle\022\017\n\007min_lat\030\001 \001(\004\022\017\n\007"
      "min_lon\030\002 \001(\004\022\017\n\007max_lat\030\003 \001(\004\022\017\n\007max_lo"
      "n\030\004 \001(\004\"z\n\010LeafNode\022\021\n\titemCount\030\001 \001(\004\0226"
      "\n\032minimum_bounding_rectangle\030\002 \001(\0132\022.pbr"
      "tree.Rectangle\022#\n\005items\030\003 \003(\0132\024.pbebg.Ed"
      "geBasedNode\"*\n\006Leaves\022 \n\005items\030\001 \003(\0132\021.p"
      "brtree.LeafNodeb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 303);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rtree.proto", &protobuf_RegisterTypes);
  ::pbebg::protobuf_edge_2dbased_2dgraph_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_rtree_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rectangle::kMinLatFieldNumber;
const int Rectangle::kMinLonFieldNumber;
const int Rectangle::kMaxLatFieldNumber;
const int Rectangle::kMaxLonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rectangle::Rectangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtree_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_lat_, &from.min_lat_,
    reinterpret_cast<char*>(&max_lon_) -
    reinterpret_cast<char*>(&min_lat_) + sizeof(max_lon_));
  // @@protoc_insertion_point(copy_constructor:pbrtree.Rectangle)
}

void Rectangle::SharedCtor() {
  ::memset(&min_lat_, 0, reinterpret_cast<char*>(&max_lon_) -
    reinterpret_cast<char*>(&min_lat_) + sizeof(max_lon_));
  _cached_size_ = 0;
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:pbrtree.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
}

void Rectangle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rectangle::descriptor() {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[0].descriptor;
}

const Rectangle& Rectangle::default_instance() {
  protobuf_rtree_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rectangle* Rectangle::New(::google::protobuf::Arena* arena) const {
  Rectangle* n = new Rectangle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.Rectangle)
  ::memset(&min_lat_, 0, reinterpret_cast<char*>(&max_lon_) -
    reinterpret_cast<char*>(&min_lat_) + sizeof(max_lon_));
}

bool Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.Rectangle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 min_lat = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 min_lon = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_lat = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 max_lon = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.Rectangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.Rectangle)
  return false;
#undef DO_
}

void Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.Rectangle)
  // uint64 min_lat = 1;
  if (this->min_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_lat(), output);
  }

  // uint64 min_lon = 2;
  if (this->min_lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->min_lon(), output);
  }

  // uint64 max_lat = 3;
  if (this->max_lat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->max_lat(), output);
  }

  // uint64 max_lon = 4;
  if (this->max_lon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->max_lon(), output);
  }

  // @@protoc_insertion_point(serialize_end:pbrtree.Rectangle)
}

::google::protobuf::uint8* Rectangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.Rectangle)
  // uint64 min_lat = 1;
  if (this->min_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_lat(), target);
  }

  // uint64 min_lon = 2;
  if (this->min_lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->min_lon(), target);
  }

  // uint64 max_lat = 3;
  if (this->max_lat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->max_lat(), target);
  }

  // uint64 max_lon = 4;
  if (this->max_lon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->max_lon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.Rectangle)
  return target;
}

size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.Rectangle)
  size_t total_size = 0;

  // uint64 min_lat = 1;
  if (this->min_lat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_lat());
  }

  // uint64 min_lon = 2;
  if (this->min_lon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->min_lon());
  }

  // uint64 max_lat = 3;
  if (this->max_lat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_lat());
  }

  // uint64 max_lon = 4;
  if (this->max_lon() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->max_lon());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rectangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rectangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.Rectangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.Rectangle)
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.min_lat() != 0) {
    set_min_lat(from.min_lat());
  }
  if (from.min_lon() != 0) {
    set_min_lon(from.min_lon());
  }
  if (from.max_lat() != 0) {
    set_max_lat(from.max_lat());
  }
  if (from.max_lon() != 0) {
    set_max_lon(from.max_lon());
  }
}

void Rectangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  return true;
}

void Rectangle::Swap(Rectangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rectangle::InternalSwap(Rectangle* other) {
  std::swap(min_lat_, other->min_lat_);
  std::swap(min_lon_, other->min_lon_);
  std::swap(max_lat_, other->max_lat_);
  std::swap(max_lon_, other->max_lon_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Rectangle::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rectangle

// uint64 min_lat = 1;
void Rectangle::clear_min_lat() {
  min_lat_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Rectangle::min_lat() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.min_lat)
  return min_lat_;
}
void Rectangle::set_min_lat(::google::protobuf::uint64 value) {
  
  min_lat_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.min_lat)
}

// uint64 min_lon = 2;
void Rectangle::clear_min_lon() {
  min_lon_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Rectangle::min_lon() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.min_lon)
  return min_lon_;
}
void Rectangle::set_min_lon(::google::protobuf::uint64 value) {
  
  min_lon_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.min_lon)
}

// uint64 max_lat = 3;
void Rectangle::clear_max_lat() {
  max_lat_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Rectangle::max_lat() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.max_lat)
  return max_lat_;
}
void Rectangle::set_max_lat(::google::protobuf::uint64 value) {
  
  max_lat_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.max_lat)
}

// uint64 max_lon = 4;
void Rectangle::clear_max_lon() {
  max_lon_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Rectangle::max_lon() const {
  // @@protoc_insertion_point(field_get:pbrtree.Rectangle.max_lon)
  return max_lon_;
}
void Rectangle::set_max_lon(::google::protobuf::uint64 value) {
  
  max_lon_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.Rectangle.max_lon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LeafNode::kItemCountFieldNumber;
const int LeafNode::kMinimumBoundingRectangleFieldNumber;
const int LeafNode::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LeafNode::LeafNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtree_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.LeafNode)
}
LeafNode::LeafNode(const LeafNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_minimum_bounding_rectangle()) {
    minimum_bounding_rectangle_ = new ::pbrtree::Rectangle(*from.minimum_bounding_rectangle_);
  } else {
    minimum_bounding_rectangle_ = NULL;
  }
  itemcount_ = from.itemcount_;
  // @@protoc_insertion_point(copy_constructor:pbrtree.LeafNode)
}

void LeafNode::SharedCtor() {
  ::memset(&minimum_bounding_rectangle_, 0, reinterpret_cast<char*>(&itemcount_) -
    reinterpret_cast<char*>(&minimum_bounding_rectangle_) + sizeof(itemcount_));
  _cached_size_ = 0;
}

LeafNode::~LeafNode() {
  // @@protoc_insertion_point(destructor:pbrtree.LeafNode)
  SharedDtor();
}

void LeafNode::SharedDtor() {
  if (this != internal_default_instance()) {
    delete minimum_bounding_rectangle_;
  }
}

void LeafNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeafNode::descriptor() {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[1].descriptor;
}

const LeafNode& LeafNode::default_instance() {
  protobuf_rtree_2eproto::InitDefaults();
  return *internal_default_instance();
}

LeafNode* LeafNode::New(::google::protobuf::Arena* arena) const {
  LeafNode* n = new LeafNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LeafNode::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.LeafNode)
  items_.Clear();
  if (GetArenaNoVirtual() == NULL && minimum_bounding_rectangle_ != NULL) {
    delete minimum_bounding_rectangle_;
  }
  minimum_bounding_rectangle_ = NULL;
  itemcount_ = GOOGLE_ULONGLONG(0);
}

bool LeafNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.LeafNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 itemCount = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .pbrtree.Rectangle minimum_bounding_rectangle = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minimum_bounding_rectangle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pbebg.EdgeBasedNode items = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.LeafNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.LeafNode)
  return false;
#undef DO_
}

void LeafNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.LeafNode)
  // uint64 itemCount = 1;
  if (this->itemcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemcount(), output);
  }

  // .pbrtree.Rectangle minimum_bounding_rectangle = 2;
  if (this->has_minimum_bounding_rectangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->minimum_bounding_rectangle_, output);
  }

  // repeated .pbebg.EdgeBasedNode items = 3;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbrtree.LeafNode)
}

::google::protobuf::uint8* LeafNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.LeafNode)
  // uint64 itemCount = 1;
  if (this->itemcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemcount(), target);
  }

  // .pbrtree.Rectangle minimum_bounding_rectangle = 2;
  if (this->has_minimum_bounding_rectangle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->minimum_bounding_rectangle_, false, target);
  }

  // repeated .pbebg.EdgeBasedNode items = 3;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.LeafNode)
  return target;
}

size_t LeafNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.LeafNode)
  size_t total_size = 0;

  // repeated .pbebg.EdgeBasedNode items = 3;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // .pbrtree.Rectangle minimum_bounding_rectangle = 2;
  if (this->has_minimum_bounding_rectangle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->minimum_bounding_rectangle_);
  }

  // uint64 itemCount = 1;
  if (this->itemcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->itemcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeafNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.LeafNode)
  GOOGLE_DCHECK_NE(&from, this);
  const LeafNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LeafNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.LeafNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.LeafNode)
    MergeFrom(*source);
  }
}

void LeafNode::MergeFrom(const LeafNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.LeafNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_.MergeFrom(from.items_);
  if (from.has_minimum_bounding_rectangle()) {
    mutable_minimum_bounding_rectangle()->::pbrtree::Rectangle::MergeFrom(from.minimum_bounding_rectangle());
  }
  if (from.itemcount() != 0) {
    set_itemcount(from.itemcount());
  }
}

void LeafNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.LeafNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeafNode::CopyFrom(const LeafNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.LeafNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeafNode::IsInitialized() const {
  return true;
}

void LeafNode::Swap(LeafNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LeafNode::InternalSwap(LeafNode* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(minimum_bounding_rectangle_, other->minimum_bounding_rectangle_);
  std::swap(itemcount_, other->itemcount_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LeafNode::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LeafNode

// uint64 itemCount = 1;
void LeafNode::clear_itemcount() {
  itemcount_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LeafNode::itemcount() const {
  // @@protoc_insertion_point(field_get:pbrtree.LeafNode.itemCount)
  return itemcount_;
}
void LeafNode::set_itemcount(::google::protobuf::uint64 value) {
  
  itemcount_ = value;
  // @@protoc_insertion_point(field_set:pbrtree.LeafNode.itemCount)
}

// .pbrtree.Rectangle minimum_bounding_rectangle = 2;
bool LeafNode::has_minimum_bounding_rectangle() const {
  return this != internal_default_instance() && minimum_bounding_rectangle_ != NULL;
}
void LeafNode::clear_minimum_bounding_rectangle() {
  if (GetArenaNoVirtual() == NULL && minimum_bounding_rectangle_ != NULL) delete minimum_bounding_rectangle_;
  minimum_bounding_rectangle_ = NULL;
}
const ::pbrtree::Rectangle& LeafNode::minimum_bounding_rectangle() const {
  // @@protoc_insertion_point(field_get:pbrtree.LeafNode.minimum_bounding_rectangle)
  return minimum_bounding_rectangle_ != NULL ? *minimum_bounding_rectangle_
                         : *::pbrtree::Rectangle::internal_default_instance();
}
::pbrtree::Rectangle* LeafNode::mutable_minimum_bounding_rectangle() {
  
  if (minimum_bounding_rectangle_ == NULL) {
    minimum_bounding_rectangle_ = new ::pbrtree::Rectangle;
  }
  // @@protoc_insertion_point(field_mutable:pbrtree.LeafNode.minimum_bounding_rectangle)
  return minimum_bounding_rectangle_;
}
::pbrtree::Rectangle* LeafNode::release_minimum_bounding_rectangle() {
  // @@protoc_insertion_point(field_release:pbrtree.LeafNode.minimum_bounding_rectangle)
  
  ::pbrtree::Rectangle* temp = minimum_bounding_rectangle_;
  minimum_bounding_rectangle_ = NULL;
  return temp;
}
void LeafNode::set_allocated_minimum_bounding_rectangle(::pbrtree::Rectangle* minimum_bounding_rectangle) {
  delete minimum_bounding_rectangle_;
  minimum_bounding_rectangle_ = minimum_bounding_rectangle;
  if (minimum_bounding_rectangle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pbrtree.LeafNode.minimum_bounding_rectangle)
}

// repeated .pbebg.EdgeBasedNode items = 3;
int LeafNode::items_size() const {
  return items_.size();
}
void LeafNode::clear_items() {
  items_.Clear();
}
const ::pbebg::EdgeBasedNode& LeafNode::items(int index) const {
  // @@protoc_insertion_point(field_get:pbrtree.LeafNode.items)
  return items_.Get(index);
}
::pbebg::EdgeBasedNode* LeafNode::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbrtree.LeafNode.items)
  return items_.Mutable(index);
}
::pbebg::EdgeBasedNode* LeafNode::add_items() {
  // @@protoc_insertion_point(field_add:pbrtree.LeafNode.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbebg::EdgeBasedNode >*
LeafNode::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pbrtree.LeafNode.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::pbebg::EdgeBasedNode >&
LeafNode::items() const {
  // @@protoc_insertion_point(field_list:pbrtree.LeafNode.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Leaves::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Leaves::Leaves()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rtree_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pbrtree.Leaves)
}
Leaves::Leaves(const Leaves& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      items_(from.items_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pbrtree.Leaves)
}

void Leaves::SharedCtor() {
  _cached_size_ = 0;
}

Leaves::~Leaves() {
  // @@protoc_insertion_point(destructor:pbrtree.Leaves)
  SharedDtor();
}

void Leaves::SharedDtor() {
}

void Leaves::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Leaves::descriptor() {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[2].descriptor;
}

const Leaves& Leaves::default_instance() {
  protobuf_rtree_2eproto::InitDefaults();
  return *internal_default_instance();
}

Leaves* Leaves::New(::google::protobuf::Arena* arena) const {
  Leaves* n = new Leaves;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Leaves::Clear() {
// @@protoc_insertion_point(message_clear_start:pbrtree.Leaves)
  items_.Clear();
}

bool Leaves::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pbrtree.Leaves)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pbrtree.LeafNode items = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pbrtree.Leaves)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pbrtree.Leaves)
  return false;
#undef DO_
}

void Leaves::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pbrtree.Leaves)
  // repeated .pbrtree.LeafNode items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pbrtree.Leaves)
}

::google::protobuf::uint8* Leaves::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:pbrtree.Leaves)
  // repeated .pbrtree.LeafNode items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pbrtree.Leaves)
  return target;
}

size_t Leaves::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pbrtree.Leaves)
  size_t total_size = 0;

  // repeated .pbrtree.LeafNode items = 1;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Leaves::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pbrtree.Leaves)
  GOOGLE_DCHECK_NE(&from, this);
  const Leaves* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Leaves>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pbrtree.Leaves)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pbrtree.Leaves)
    MergeFrom(*source);
  }
}

void Leaves::MergeFrom(const Leaves& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pbrtree.Leaves)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_.MergeFrom(from.items_);
}

void Leaves::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pbrtree.Leaves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Leaves::CopyFrom(const Leaves& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pbrtree.Leaves)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Leaves::IsInitialized() const {
  return true;
}

void Leaves::Swap(Leaves* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Leaves::InternalSwap(Leaves* other) {
  items_.UnsafeArenaSwap(&other->items_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Leaves::GetMetadata() const {
  protobuf_rtree_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rtree_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Leaves

// repeated .pbrtree.LeafNode items = 1;
int Leaves::items_size() const {
  return items_.size();
}
void Leaves::clear_items() {
  items_.Clear();
}
const ::pbrtree::LeafNode& Leaves::items(int index) const {
  // @@protoc_insertion_point(field_get:pbrtree.Leaves.items)
  return items_.Get(index);
}
::pbrtree::LeafNode* Leaves::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pbrtree.Leaves.items)
  return items_.Mutable(index);
}
::pbrtree::LeafNode* Leaves::add_items() {
  // @@protoc_insertion_point(field_add:pbrtree.Leaves.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::pbrtree::LeafNode >*
Leaves::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pbrtree.Leaves.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::pbrtree::LeafNode >&
Leaves::items() const {
  // @@protoc_insertion_point(field_list:pbrtree.Leaves.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pbrtree

// @@protoc_insertion_point(global_scope)
