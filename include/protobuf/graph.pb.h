// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef PROTOBUF_graph_2eproto__INCLUDED
#define PROTOBUF_graph_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_graph_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEdgeDataImpl();
void InitDefaultsEdgeData();
void InitDefaultsMLDQueryGraphImpl();
void InitDefaultsMLDQueryGraph();
inline void InitDefaults() {
  InitDefaultsEdgeData();
  InitDefaultsMLDQueryGraph();
}
}  // namespace protobuf_graph_2eproto
namespace pbmldg {
class EdgeData;
class EdgeDataDefaultTypeInternal;
extern EdgeDataDefaultTypeInternal _EdgeData_default_instance_;
class MLDQueryGraph;
class MLDQueryGraphDefaultTypeInternal;
extern MLDQueryGraphDefaultTypeInternal _MLDQueryGraph_default_instance_;
}  // namespace pbmldg
namespace pbmldg {

// ===================================================================

class EdgeData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbmldg.EdgeData) */ {
 public:
  EdgeData();
  virtual ~EdgeData();

  EdgeData(const EdgeData& from);

  inline EdgeData& operator=(const EdgeData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EdgeData(EdgeData&& from) noexcept
    : EdgeData() {
    *this = ::std::move(from);
  }

  inline EdgeData& operator=(EdgeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EdgeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeData* internal_default_instance() {
    return reinterpret_cast<const EdgeData*>(
               &_EdgeData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(EdgeData* other);
  friend void swap(EdgeData& a, EdgeData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EdgeData* New() const PROTOBUF_FINAL { return New(NULL); }

  EdgeData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EdgeData& from);
  void MergeFrom(const EdgeData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EdgeData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  ::google::protobuf::uint32 target() const;
  void set_target(::google::protobuf::uint32 value);

  // optional uint32 TurnID = 2;
  bool has_turnid() const;
  void clear_turnid();
  static const int kTurnIDFieldNumber = 2;
  ::google::protobuf::uint32 turnid() const;
  void set_turnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pbmldg.EdgeData)
 private:
  void set_has_target();
  void clear_has_target();
  void set_has_turnid();
  void clear_has_turnid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 target_;
  ::google::protobuf::uint32 turnid_;
  friend struct ::protobuf_graph_2eproto::TableStruct;
  friend void ::protobuf_graph_2eproto::InitDefaultsEdgeDataImpl();
};
// -------------------------------------------------------------------

class MLDQueryGraph : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pbmldg.MLDQueryGraph) */ {
 public:
  MLDQueryGraph();
  virtual ~MLDQueryGraph();

  MLDQueryGraph(const MLDQueryGraph& from);

  inline MLDQueryGraph& operator=(const MLDQueryGraph& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MLDQueryGraph(MLDQueryGraph&& from) noexcept
    : MLDQueryGraph() {
    *this = ::std::move(from);
  }

  inline MLDQueryGraph& operator=(MLDQueryGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MLDQueryGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MLDQueryGraph* internal_default_instance() {
    return reinterpret_cast<const MLDQueryGraph*>(
               &_MLDQueryGraph_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MLDQueryGraph* other);
  friend void swap(MLDQueryGraph& a, MLDQueryGraph& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MLDQueryGraph* New() const PROTOBUF_FINAL { return New(NULL); }

  MLDQueryGraph* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MLDQueryGraph& from);
  void MergeFrom(const MLDQueryGraph& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MLDQueryGraph* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 nodes = 1;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::google::protobuf::uint32 nodes(int index) const;
  void set_nodes(int index, ::google::protobuf::uint32 value);
  void add_nodes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      nodes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_nodes();

  // repeated .pbmldg.EdgeData edges = 2;
  int edges_size() const;
  void clear_edges();
  static const int kEdgesFieldNumber = 2;
  const ::pbmldg::EdgeData& edges(int index) const;
  ::pbmldg::EdgeData* mutable_edges(int index);
  ::pbmldg::EdgeData* add_edges();
  ::google::protobuf::RepeatedPtrField< ::pbmldg::EdgeData >*
      mutable_edges();
  const ::google::protobuf::RepeatedPtrField< ::pbmldg::EdgeData >&
      edges() const;

  // repeated bool IsForward = 3;
  int isforward_size() const;
  void clear_isforward();
  static const int kIsForwardFieldNumber = 3;
  bool isforward(int index) const;
  void set_isforward(int index, bool value);
  void add_isforward(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      isforward() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_isforward();

  // repeated bool IsBackward = 4;
  int isbackward_size() const;
  void clear_isbackward();
  static const int kIsBackwardFieldNumber = 4;
  bool isbackward(int index) const;
  void set_isbackward(int index, bool value);
  void add_isbackward(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      isbackward() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_isbackward();

  // repeated uint32 nodeLevelOffset = 5;
  int nodeleveloffset_size() const;
  void clear_nodeleveloffset();
  static const int kNodeLevelOffsetFieldNumber = 5;
  ::google::protobuf::uint32 nodeleveloffset(int index) const;
  void set_nodeleveloffset(int index, ::google::protobuf::uint32 value);
  void add_nodeleveloffset(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      nodeleveloffset() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_nodeleveloffset();

  // repeated int32 nodeWeights = 6;
  int nodeweights_size() const;
  void clear_nodeweights();
  static const int kNodeWeightsFieldNumber = 6;
  ::google::protobuf::int32 nodeweights(int index) const;
  void set_nodeweights(int index, ::google::protobuf::int32 value);
  void add_nodeweights(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nodeweights() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nodeweights();

  // @@protoc_insertion_point(class_scope:pbmldg.MLDQueryGraph)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > nodes_;
  ::google::protobuf::RepeatedPtrField< ::pbmldg::EdgeData > edges_;
  ::google::protobuf::RepeatedField< bool > isforward_;
  ::google::protobuf::RepeatedField< bool > isbackward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > nodeleveloffset_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nodeweights_;
  friend struct ::protobuf_graph_2eproto::TableStruct;
  friend void ::protobuf_graph_2eproto::InitDefaultsMLDQueryGraphImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EdgeData

// optional uint32 Target = 1;
inline bool EdgeData::has_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EdgeData::set_has_target() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EdgeData::clear_has_target() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EdgeData::clear_target() {
  target_ = 0u;
  clear_has_target();
}
inline ::google::protobuf::uint32 EdgeData::target() const {
  // @@protoc_insertion_point(field_get:pbmldg.EdgeData.Target)
  return target_;
}
inline void EdgeData::set_target(::google::protobuf::uint32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:pbmldg.EdgeData.Target)
}

// optional uint32 TurnID = 2;
inline bool EdgeData::has_turnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EdgeData::set_has_turnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EdgeData::clear_has_turnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EdgeData::clear_turnid() {
  turnid_ = 0u;
  clear_has_turnid();
}
inline ::google::protobuf::uint32 EdgeData::turnid() const {
  // @@protoc_insertion_point(field_get:pbmldg.EdgeData.TurnID)
  return turnid_;
}
inline void EdgeData::set_turnid(::google::protobuf::uint32 value) {
  set_has_turnid();
  turnid_ = value;
  // @@protoc_insertion_point(field_set:pbmldg.EdgeData.TurnID)
}

// -------------------------------------------------------------------

// MLDQueryGraph

// repeated uint32 nodes = 1;
inline int MLDQueryGraph::nodes_size() const {
  return nodes_.size();
}
inline void MLDQueryGraph::clear_nodes() {
  nodes_.Clear();
}
inline ::google::protobuf::uint32 MLDQueryGraph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:pbmldg.MLDQueryGraph.nodes)
  return nodes_.Get(index);
}
inline void MLDQueryGraph::set_nodes(int index, ::google::protobuf::uint32 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbmldg.MLDQueryGraph.nodes)
}
inline void MLDQueryGraph::add_nodes(::google::protobuf::uint32 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:pbmldg.MLDQueryGraph.nodes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MLDQueryGraph::nodes() const {
  // @@protoc_insertion_point(field_list:pbmldg.MLDQueryGraph.nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MLDQueryGraph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:pbmldg.MLDQueryGraph.nodes)
  return &nodes_;
}

// repeated .pbmldg.EdgeData edges = 2;
inline int MLDQueryGraph::edges_size() const {
  return edges_.size();
}
inline void MLDQueryGraph::clear_edges() {
  edges_.Clear();
}
inline const ::pbmldg::EdgeData& MLDQueryGraph::edges(int index) const {
  // @@protoc_insertion_point(field_get:pbmldg.MLDQueryGraph.edges)
  return edges_.Get(index);
}
inline ::pbmldg::EdgeData* MLDQueryGraph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:pbmldg.MLDQueryGraph.edges)
  return edges_.Mutable(index);
}
inline ::pbmldg::EdgeData* MLDQueryGraph::add_edges() {
  // @@protoc_insertion_point(field_add:pbmldg.MLDQueryGraph.edges)
  return edges_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::pbmldg::EdgeData >*
MLDQueryGraph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:pbmldg.MLDQueryGraph.edges)
  return &edges_;
}
inline const ::google::protobuf::RepeatedPtrField< ::pbmldg::EdgeData >&
MLDQueryGraph::edges() const {
  // @@protoc_insertion_point(field_list:pbmldg.MLDQueryGraph.edges)
  return edges_;
}

// repeated bool IsForward = 3;
inline int MLDQueryGraph::isforward_size() const {
  return isforward_.size();
}
inline void MLDQueryGraph::clear_isforward() {
  isforward_.Clear();
}
inline bool MLDQueryGraph::isforward(int index) const {
  // @@protoc_insertion_point(field_get:pbmldg.MLDQueryGraph.IsForward)
  return isforward_.Get(index);
}
inline void MLDQueryGraph::set_isforward(int index, bool value) {
  isforward_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbmldg.MLDQueryGraph.IsForward)
}
inline void MLDQueryGraph::add_isforward(bool value) {
  isforward_.Add(value);
  // @@protoc_insertion_point(field_add:pbmldg.MLDQueryGraph.IsForward)
}
inline const ::google::protobuf::RepeatedField< bool >&
MLDQueryGraph::isforward() const {
  // @@protoc_insertion_point(field_list:pbmldg.MLDQueryGraph.IsForward)
  return isforward_;
}
inline ::google::protobuf::RepeatedField< bool >*
MLDQueryGraph::mutable_isforward() {
  // @@protoc_insertion_point(field_mutable_list:pbmldg.MLDQueryGraph.IsForward)
  return &isforward_;
}

// repeated bool IsBackward = 4;
inline int MLDQueryGraph::isbackward_size() const {
  return isbackward_.size();
}
inline void MLDQueryGraph::clear_isbackward() {
  isbackward_.Clear();
}
inline bool MLDQueryGraph::isbackward(int index) const {
  // @@protoc_insertion_point(field_get:pbmldg.MLDQueryGraph.IsBackward)
  return isbackward_.Get(index);
}
inline void MLDQueryGraph::set_isbackward(int index, bool value) {
  isbackward_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbmldg.MLDQueryGraph.IsBackward)
}
inline void MLDQueryGraph::add_isbackward(bool value) {
  isbackward_.Add(value);
  // @@protoc_insertion_point(field_add:pbmldg.MLDQueryGraph.IsBackward)
}
inline const ::google::protobuf::RepeatedField< bool >&
MLDQueryGraph::isbackward() const {
  // @@protoc_insertion_point(field_list:pbmldg.MLDQueryGraph.IsBackward)
  return isbackward_;
}
inline ::google::protobuf::RepeatedField< bool >*
MLDQueryGraph::mutable_isbackward() {
  // @@protoc_insertion_point(field_mutable_list:pbmldg.MLDQueryGraph.IsBackward)
  return &isbackward_;
}

// repeated uint32 nodeLevelOffset = 5;
inline int MLDQueryGraph::nodeleveloffset_size() const {
  return nodeleveloffset_.size();
}
inline void MLDQueryGraph::clear_nodeleveloffset() {
  nodeleveloffset_.Clear();
}
inline ::google::protobuf::uint32 MLDQueryGraph::nodeleveloffset(int index) const {
  // @@protoc_insertion_point(field_get:pbmldg.MLDQueryGraph.nodeLevelOffset)
  return nodeleveloffset_.Get(index);
}
inline void MLDQueryGraph::set_nodeleveloffset(int index, ::google::protobuf::uint32 value) {
  nodeleveloffset_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbmldg.MLDQueryGraph.nodeLevelOffset)
}
inline void MLDQueryGraph::add_nodeleveloffset(::google::protobuf::uint32 value) {
  nodeleveloffset_.Add(value);
  // @@protoc_insertion_point(field_add:pbmldg.MLDQueryGraph.nodeLevelOffset)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MLDQueryGraph::nodeleveloffset() const {
  // @@protoc_insertion_point(field_list:pbmldg.MLDQueryGraph.nodeLevelOffset)
  return nodeleveloffset_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MLDQueryGraph::mutable_nodeleveloffset() {
  // @@protoc_insertion_point(field_mutable_list:pbmldg.MLDQueryGraph.nodeLevelOffset)
  return &nodeleveloffset_;
}

// repeated int32 nodeWeights = 6;
inline int MLDQueryGraph::nodeweights_size() const {
  return nodeweights_.size();
}
inline void MLDQueryGraph::clear_nodeweights() {
  nodeweights_.Clear();
}
inline ::google::protobuf::int32 MLDQueryGraph::nodeweights(int index) const {
  // @@protoc_insertion_point(field_get:pbmldg.MLDQueryGraph.nodeWeights)
  return nodeweights_.Get(index);
}
inline void MLDQueryGraph::set_nodeweights(int index, ::google::protobuf::int32 value) {
  nodeweights_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbmldg.MLDQueryGraph.nodeWeights)
}
inline void MLDQueryGraph::add_nodeweights(::google::protobuf::int32 value) {
  nodeweights_.Add(value);
  // @@protoc_insertion_point(field_add:pbmldg.MLDQueryGraph.nodeWeights)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MLDQueryGraph::nodeweights() const {
  // @@protoc_insertion_point(field_list:pbmldg.MLDQueryGraph.nodeWeights)
  return nodeweights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MLDQueryGraph::mutable_nodeweights() {
  // @@protoc_insertion_point(field_mutable_list:pbmldg.MLDQueryGraph.nodeWeights)
  return &nodeweights_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbmldg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_graph_2eproto__INCLUDED
